Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> program function
Rule 3     program -> program declaration Semi
Rule 4     program -> empty
Rule 5     type -> Int
Rule 6     function -> function_def
Rule 7     function -> function_decl
Rule 8     function_def -> type Identifier LParen parameter_list RParen LBrace block RBrace
Rule 9     function_decl -> type Identifier LParen parameter_list RParen Semi
Rule 10    parameter_list -> parameter_list Comma type_identifier_union
Rule 11    parameter_list -> type_identifier_union
Rule 12    type_identifier_union -> type
Rule 13    type_identifier_union -> type Identifier
Rule 14    parameter_list -> empty
Rule 15    block -> block block_item
Rule 16    block -> empty
Rule 17    block_item -> statement
Rule 18    block_item -> declaration Semi
Rule 19    statement -> statement_matched
Rule 20    statement -> statement_unmatched
Rule 21    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 22    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 23    statement_unmatched -> If LParen expression RParen statement
Rule 24    statement_matched -> While LParen expression RParen statement_matched
Rule 25    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 26    statement_matched -> Do statement_matched While LParen expression RParen Semi
Rule 27    statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi
Rule 28    statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
Rule 29    statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
Rule 30    statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 31    statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 32    statement_matched -> Return expression Semi
Rule 33    statement_matched -> opt_expression Semi
Rule 34    statement_matched -> LBrace block RBrace
Rule 35    statement_matched -> Break Semi
Rule 36    statement_matched -> Continue Semi
Rule 37    opt_expression -> expression
Rule 38    opt_expression -> empty
Rule 39    declaration -> type Identifier
Rule 40    declaration -> type Identifier Assign expression
Rule 41    expression -> assignment
Rule 42    assignment -> conditional
Rule 43    conditional -> logical_or
Rule 44    logical_or -> logical_and
Rule 45    logical_and -> bit_or
Rule 46    bit_or -> xor
Rule 47    xor -> bit_and
Rule 48    bit_and -> equality
Rule 49    equality -> relational
Rule 50    relational -> additive
Rule 51    additive -> multiplicative
Rule 52    multiplicative -> unary
Rule 53    unary -> postfix
Rule 54    postfix -> primary
Rule 55    unary -> Minus unary
Rule 56    unary -> BitNot unary
Rule 57    unary -> Not unary
Rule 58    postfix -> Identifier LParen expression_list RParen
Rule 59    expression_list -> expression_list Comma expression
Rule 60    expression_list -> expression
Rule 61    expression_list -> empty
Rule 62    assignment -> Identifier Assign expression
Rule 63    logical_or -> logical_or Or logical_and
Rule 64    logical_and -> logical_and And bit_or
Rule 65    bit_or -> bit_or BitOr xor
Rule 66    xor -> xor Xor bit_and
Rule 67    bit_and -> bit_and BitAnd equality
Rule 68    equality -> equality NotEqual relational
Rule 69    equality -> equality Equal relational
Rule 70    relational -> relational Less additive
Rule 71    relational -> relational Greater additive
Rule 72    relational -> relational LessEqual additive
Rule 73    relational -> relational GreaterEqual additive
Rule 74    additive -> additive Plus multiplicative
Rule 75    additive -> additive Minus multiplicative
Rule 76    multiplicative -> multiplicative Mul unary
Rule 77    multiplicative -> multiplicative Div unary
Rule 78    multiplicative -> multiplicative Mod unary
Rule 79    conditional -> logical_or Question expression Colon conditional
Rule 80    primary -> Integer
Rule 81    primary -> Identifier
Rule 82    primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 64
Assign               : 40 62
BitAnd               : 67
BitNot               : 56
BitOr                : 65
Break                : 35
Colon                : 79
Comma                : 10 59
Continue             : 36
Div                  : 77
Do                   : 26 27
Else                 : 21 22
Equal                : 69
For                  : 28 29 30 31
Greater              : 71
GreaterEqual         : 73
Identifier           : 8 9 13 39 40 58 62 81
If                   : 21 22 23
Int                  : 5
Integer              : 80
LBrace               : 8 34
LParen               : 8 9 21 22 23 24 25 26 27 28 29 30 31 58 82
Less                 : 70
LessEqual            : 72
Minus                : 55 75
Mod                  : 78
Mul                  : 76
Not                  : 57
NotEqual             : 68
Or                   : 63
Plus                 : 74
Question             : 79
RBrace               : 8 34
RParen               : 8 9 21 22 23 24 25 26 27 28 29 30 31 58 82
Return               : 32
Semi                 : 3 9 18 26 27 28 28 29 29 30 30 31 31 31 32 33 35 36
While                : 24 25 26 27
Xor                  : 66
error                : 

Nonterminals, with rules where they appear

additive             : 50 70 71 72 73 74 75
assignment           : 41
bit_and              : 47 66 67
bit_or               : 45 64 65
block                : 8 15 34
block_item           : 15
conditional          : 42 79
declaration          : 3 18 29 31
empty                : 4 14 16 38 61
equality             : 48 67 68 69
expression           : 21 22 23 24 25 26 27 32 37 40 59 60 62 79 82
expression_list      : 58 59
function             : 2
function_decl        : 7
function_def         : 6
logical_and          : 44 63 64
logical_or           : 43 63 79
multiplicative       : 51 74 75 76 77 78
opt_expression       : 28 28 28 29 29 30 30 30 31 31 31 33
parameter_list       : 8 9 10
postfix              : 53
primary              : 54
program              : 2 3 0
relational           : 49 68 69 70 71 72 73
statement            : 17 23
statement_matched    : 19 21 21 22 24 26 28 29
statement_unmatched  : 20 22 25 27 30 31
type                 : 8 9 12 13 39 40
type_identifier_union : 10 11
unary                : 52 55 56 57 76 77 78
xor                  : 46 65 66

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . program function
    (3) program -> . program declaration Semi
    (4) program -> . empty
    (1) empty -> .

    Int             reduce using rule 1 (empty -> .)
    $end            reduce using rule 1 (empty -> .)

    program                        shift and go to state 1
    empty                          shift and go to state 2

state 1

    (0) S' -> program .
    (2) program -> program . function
    (3) program -> program . declaration Semi
    (6) function -> . function_def
    (7) function -> . function_decl
    (39) declaration -> . type Identifier
    (40) declaration -> . type Identifier Assign expression
    (8) function_def -> . type Identifier LParen parameter_list RParen LBrace block RBrace
    (9) function_decl -> . type Identifier LParen parameter_list RParen Semi
    (5) type -> . Int

    Int             shift and go to state 8

    function                       shift and go to state 3
    declaration                    shift and go to state 4
    function_def                   shift and go to state 5
    function_decl                  shift and go to state 6
    type                           shift and go to state 7

state 2

    (4) program -> empty .

    Int             reduce using rule 4 (program -> empty .)
    $end            reduce using rule 4 (program -> empty .)


state 3

    (2) program -> program function .

    Int             reduce using rule 2 (program -> program function .)
    $end            reduce using rule 2 (program -> program function .)


state 4

    (3) program -> program declaration . Semi

    Semi            shift and go to state 9


state 5

    (6) function -> function_def .

    Int             reduce using rule 6 (function -> function_def .)
    $end            reduce using rule 6 (function -> function_def .)


state 6

    (7) function -> function_decl .

    Int             reduce using rule 7 (function -> function_decl .)
    $end            reduce using rule 7 (function -> function_decl .)


state 7

    (39) declaration -> type . Identifier
    (40) declaration -> type . Identifier Assign expression
    (8) function_def -> type . Identifier LParen parameter_list RParen LBrace block RBrace
    (9) function_decl -> type . Identifier LParen parameter_list RParen Semi

    Identifier      shift and go to state 10


state 8

    (5) type -> Int .

    Identifier      reduce using rule 5 (type -> Int .)
    RParen          reduce using rule 5 (type -> Int .)
    Comma           reduce using rule 5 (type -> Int .)


state 9

    (3) program -> program declaration Semi .

    Int             reduce using rule 3 (program -> program declaration Semi .)
    $end            reduce using rule 3 (program -> program declaration Semi .)


state 10

    (39) declaration -> type Identifier .
    (40) declaration -> type Identifier . Assign expression
    (8) function_def -> type Identifier . LParen parameter_list RParen LBrace block RBrace
    (9) function_decl -> type Identifier . LParen parameter_list RParen Semi

    Semi            reduce using rule 39 (declaration -> type Identifier .)
    Assign          shift and go to state 11
    LParen          shift and go to state 12


state 11

    (40) declaration -> type Identifier Assign . expression
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 14
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 12

    (8) function_def -> type Identifier LParen . parameter_list RParen LBrace block RBrace
    (9) function_decl -> type Identifier LParen . parameter_list RParen Semi
    (10) parameter_list -> . parameter_list Comma type_identifier_union
    (11) parameter_list -> . type_identifier_union
    (14) parameter_list -> . empty
    (12) type_identifier_union -> . type
    (13) type_identifier_union -> . type Identifier
    (1) empty -> .
    (5) type -> . Int

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Int             shift and go to state 8

    type                           shift and go to state 34
    parameter_list                 shift and go to state 35
    type_identifier_union          shift and go to state 36
    empty                          shift and go to state 37

state 13

    (62) assignment -> Identifier . Assign expression
    (58) postfix -> Identifier . LParen expression_list RParen
    (81) primary -> Identifier .

    Assign          shift and go to state 38
    LParen          shift and go to state 39
    Mul             reduce using rule 81 (primary -> Identifier .)
    Div             reduce using rule 81 (primary -> Identifier .)
    Mod             reduce using rule 81 (primary -> Identifier .)
    Plus            reduce using rule 81 (primary -> Identifier .)
    Minus           reduce using rule 81 (primary -> Identifier .)
    Less            reduce using rule 81 (primary -> Identifier .)
    Greater         reduce using rule 81 (primary -> Identifier .)
    LessEqual       reduce using rule 81 (primary -> Identifier .)
    GreaterEqual    reduce using rule 81 (primary -> Identifier .)
    NotEqual        reduce using rule 81 (primary -> Identifier .)
    Equal           reduce using rule 81 (primary -> Identifier .)
    BitAnd          reduce using rule 81 (primary -> Identifier .)
    Xor             reduce using rule 81 (primary -> Identifier .)
    BitOr           reduce using rule 81 (primary -> Identifier .)
    And             reduce using rule 81 (primary -> Identifier .)
    Question        reduce using rule 81 (primary -> Identifier .)
    Or              reduce using rule 81 (primary -> Identifier .)
    Semi            reduce using rule 81 (primary -> Identifier .)
    RParen          reduce using rule 81 (primary -> Identifier .)
    Comma           reduce using rule 81 (primary -> Identifier .)
    Colon           reduce using rule 81 (primary -> Identifier .)


state 14

    (40) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 40 (declaration -> type Identifier Assign expression .)


state 15

    (41) expression -> assignment .

    Semi            reduce using rule 41 (expression -> assignment .)
    RParen          reduce using rule 41 (expression -> assignment .)
    Comma           reduce using rule 41 (expression -> assignment .)
    Colon           reduce using rule 41 (expression -> assignment .)


state 16

    (42) assignment -> conditional .

    Semi            reduce using rule 42 (assignment -> conditional .)
    RParen          reduce using rule 42 (assignment -> conditional .)
    Comma           reduce using rule 42 (assignment -> conditional .)
    Colon           reduce using rule 42 (assignment -> conditional .)


state 17

    (43) conditional -> logical_or .
    (79) conditional -> logical_or . Question expression Colon conditional
    (63) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 43 (conditional -> logical_or .)
    RParen          reduce using rule 43 (conditional -> logical_or .)
    Comma           reduce using rule 43 (conditional -> logical_or .)
    Colon           reduce using rule 43 (conditional -> logical_or .)
    Question        shift and go to state 40
    Or              shift and go to state 41


state 18

    (44) logical_or -> logical_and .
    (64) logical_and -> logical_and . And bit_or

    Question        reduce using rule 44 (logical_or -> logical_and .)
    Or              reduce using rule 44 (logical_or -> logical_and .)
    Semi            reduce using rule 44 (logical_or -> logical_and .)
    RParen          reduce using rule 44 (logical_or -> logical_and .)
    Comma           reduce using rule 44 (logical_or -> logical_and .)
    Colon           reduce using rule 44 (logical_or -> logical_and .)
    And             shift and go to state 42


state 19

    (45) logical_and -> bit_or .
    (65) bit_or -> bit_or . BitOr xor

    And             reduce using rule 45 (logical_and -> bit_or .)
    Question        reduce using rule 45 (logical_and -> bit_or .)
    Or              reduce using rule 45 (logical_and -> bit_or .)
    Semi            reduce using rule 45 (logical_and -> bit_or .)
    RParen          reduce using rule 45 (logical_and -> bit_or .)
    Comma           reduce using rule 45 (logical_and -> bit_or .)
    Colon           reduce using rule 45 (logical_and -> bit_or .)
    BitOr           shift and go to state 43


state 20

    (46) bit_or -> xor .
    (66) xor -> xor . Xor bit_and

    BitOr           reduce using rule 46 (bit_or -> xor .)
    And             reduce using rule 46 (bit_or -> xor .)
    Question        reduce using rule 46 (bit_or -> xor .)
    Or              reduce using rule 46 (bit_or -> xor .)
    Semi            reduce using rule 46 (bit_or -> xor .)
    RParen          reduce using rule 46 (bit_or -> xor .)
    Comma           reduce using rule 46 (bit_or -> xor .)
    Colon           reduce using rule 46 (bit_or -> xor .)
    Xor             shift and go to state 44


state 21

    (47) xor -> bit_and .
    (67) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 47 (xor -> bit_and .)
    BitOr           reduce using rule 47 (xor -> bit_and .)
    And             reduce using rule 47 (xor -> bit_and .)
    Question        reduce using rule 47 (xor -> bit_and .)
    Or              reduce using rule 47 (xor -> bit_and .)
    Semi            reduce using rule 47 (xor -> bit_and .)
    RParen          reduce using rule 47 (xor -> bit_and .)
    Comma           reduce using rule 47 (xor -> bit_and .)
    Colon           reduce using rule 47 (xor -> bit_and .)
    BitAnd          shift and go to state 45


state 22

    (48) bit_and -> equality .
    (68) equality -> equality . NotEqual relational
    (69) equality -> equality . Equal relational

    BitAnd          reduce using rule 48 (bit_and -> equality .)
    Xor             reduce using rule 48 (bit_and -> equality .)
    BitOr           reduce using rule 48 (bit_and -> equality .)
    And             reduce using rule 48 (bit_and -> equality .)
    Question        reduce using rule 48 (bit_and -> equality .)
    Or              reduce using rule 48 (bit_and -> equality .)
    Semi            reduce using rule 48 (bit_and -> equality .)
    RParen          reduce using rule 48 (bit_and -> equality .)
    Comma           reduce using rule 48 (bit_and -> equality .)
    Colon           reduce using rule 48 (bit_and -> equality .)
    NotEqual        shift and go to state 46
    Equal           shift and go to state 47


state 23

    (49) equality -> relational .
    (70) relational -> relational . Less additive
    (71) relational -> relational . Greater additive
    (72) relational -> relational . LessEqual additive
    (73) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 49 (equality -> relational .)
    Equal           reduce using rule 49 (equality -> relational .)
    BitAnd          reduce using rule 49 (equality -> relational .)
    Xor             reduce using rule 49 (equality -> relational .)
    BitOr           reduce using rule 49 (equality -> relational .)
    And             reduce using rule 49 (equality -> relational .)
    Question        reduce using rule 49 (equality -> relational .)
    Or              reduce using rule 49 (equality -> relational .)
    Semi            reduce using rule 49 (equality -> relational .)
    RParen          reduce using rule 49 (equality -> relational .)
    Comma           reduce using rule 49 (equality -> relational .)
    Colon           reduce using rule 49 (equality -> relational .)
    Less            shift and go to state 48
    Greater         shift and go to state 49
    LessEqual       shift and go to state 50
    GreaterEqual    shift and go to state 51


state 24

    (50) relational -> additive .
    (74) additive -> additive . Plus multiplicative
    (75) additive -> additive . Minus multiplicative

    Less            reduce using rule 50 (relational -> additive .)
    Greater         reduce using rule 50 (relational -> additive .)
    LessEqual       reduce using rule 50 (relational -> additive .)
    GreaterEqual    reduce using rule 50 (relational -> additive .)
    NotEqual        reduce using rule 50 (relational -> additive .)
    Equal           reduce using rule 50 (relational -> additive .)
    BitAnd          reduce using rule 50 (relational -> additive .)
    Xor             reduce using rule 50 (relational -> additive .)
    BitOr           reduce using rule 50 (relational -> additive .)
    And             reduce using rule 50 (relational -> additive .)
    Question        reduce using rule 50 (relational -> additive .)
    Or              reduce using rule 50 (relational -> additive .)
    Semi            reduce using rule 50 (relational -> additive .)
    RParen          reduce using rule 50 (relational -> additive .)
    Comma           reduce using rule 50 (relational -> additive .)
    Colon           reduce using rule 50 (relational -> additive .)
    Plus            shift and go to state 52
    Minus           shift and go to state 53


state 25

    (51) additive -> multiplicative .
    (76) multiplicative -> multiplicative . Mul unary
    (77) multiplicative -> multiplicative . Div unary
    (78) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 51 (additive -> multiplicative .)
    Minus           reduce using rule 51 (additive -> multiplicative .)
    Less            reduce using rule 51 (additive -> multiplicative .)
    Greater         reduce using rule 51 (additive -> multiplicative .)
    LessEqual       reduce using rule 51 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 51 (additive -> multiplicative .)
    NotEqual        reduce using rule 51 (additive -> multiplicative .)
    Equal           reduce using rule 51 (additive -> multiplicative .)
    BitAnd          reduce using rule 51 (additive -> multiplicative .)
    Xor             reduce using rule 51 (additive -> multiplicative .)
    BitOr           reduce using rule 51 (additive -> multiplicative .)
    And             reduce using rule 51 (additive -> multiplicative .)
    Question        reduce using rule 51 (additive -> multiplicative .)
    Or              reduce using rule 51 (additive -> multiplicative .)
    Semi            reduce using rule 51 (additive -> multiplicative .)
    RParen          reduce using rule 51 (additive -> multiplicative .)
    Comma           reduce using rule 51 (additive -> multiplicative .)
    Colon           reduce using rule 51 (additive -> multiplicative .)
    Mul             shift and go to state 54
    Div             shift and go to state 55
    Mod             shift and go to state 56


state 26

    (55) unary -> Minus . unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    unary                          shift and go to state 57
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 27

    (52) multiplicative -> unary .

    Mul             reduce using rule 52 (multiplicative -> unary .)
    Div             reduce using rule 52 (multiplicative -> unary .)
    Mod             reduce using rule 52 (multiplicative -> unary .)
    Plus            reduce using rule 52 (multiplicative -> unary .)
    Minus           reduce using rule 52 (multiplicative -> unary .)
    Less            reduce using rule 52 (multiplicative -> unary .)
    Greater         reduce using rule 52 (multiplicative -> unary .)
    LessEqual       reduce using rule 52 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 52 (multiplicative -> unary .)
    NotEqual        reduce using rule 52 (multiplicative -> unary .)
    Equal           reduce using rule 52 (multiplicative -> unary .)
    BitAnd          reduce using rule 52 (multiplicative -> unary .)
    Xor             reduce using rule 52 (multiplicative -> unary .)
    BitOr           reduce using rule 52 (multiplicative -> unary .)
    And             reduce using rule 52 (multiplicative -> unary .)
    Question        reduce using rule 52 (multiplicative -> unary .)
    Or              reduce using rule 52 (multiplicative -> unary .)
    Semi            reduce using rule 52 (multiplicative -> unary .)
    RParen          reduce using rule 52 (multiplicative -> unary .)
    Comma           reduce using rule 52 (multiplicative -> unary .)
    Colon           reduce using rule 52 (multiplicative -> unary .)


state 28

    (53) unary -> postfix .

    Mul             reduce using rule 53 (unary -> postfix .)
    Div             reduce using rule 53 (unary -> postfix .)
    Mod             reduce using rule 53 (unary -> postfix .)
    Plus            reduce using rule 53 (unary -> postfix .)
    Minus           reduce using rule 53 (unary -> postfix .)
    Less            reduce using rule 53 (unary -> postfix .)
    Greater         reduce using rule 53 (unary -> postfix .)
    LessEqual       reduce using rule 53 (unary -> postfix .)
    GreaterEqual    reduce using rule 53 (unary -> postfix .)
    NotEqual        reduce using rule 53 (unary -> postfix .)
    Equal           reduce using rule 53 (unary -> postfix .)
    BitAnd          reduce using rule 53 (unary -> postfix .)
    Xor             reduce using rule 53 (unary -> postfix .)
    BitOr           reduce using rule 53 (unary -> postfix .)
    And             reduce using rule 53 (unary -> postfix .)
    Question        reduce using rule 53 (unary -> postfix .)
    Or              reduce using rule 53 (unary -> postfix .)
    Semi            reduce using rule 53 (unary -> postfix .)
    RParen          reduce using rule 53 (unary -> postfix .)
    Comma           reduce using rule 53 (unary -> postfix .)
    Colon           reduce using rule 53 (unary -> postfix .)


state 29

    (56) unary -> BitNot . unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    unary                          shift and go to state 59
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 30

    (57) unary -> Not . unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    unary                          shift and go to state 60
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 31

    (54) postfix -> primary .

    Mul             reduce using rule 54 (postfix -> primary .)
    Div             reduce using rule 54 (postfix -> primary .)
    Mod             reduce using rule 54 (postfix -> primary .)
    Plus            reduce using rule 54 (postfix -> primary .)
    Minus           reduce using rule 54 (postfix -> primary .)
    Less            reduce using rule 54 (postfix -> primary .)
    Greater         reduce using rule 54 (postfix -> primary .)
    LessEqual       reduce using rule 54 (postfix -> primary .)
    GreaterEqual    reduce using rule 54 (postfix -> primary .)
    NotEqual        reduce using rule 54 (postfix -> primary .)
    Equal           reduce using rule 54 (postfix -> primary .)
    BitAnd          reduce using rule 54 (postfix -> primary .)
    Xor             reduce using rule 54 (postfix -> primary .)
    BitOr           reduce using rule 54 (postfix -> primary .)
    And             reduce using rule 54 (postfix -> primary .)
    Question        reduce using rule 54 (postfix -> primary .)
    Or              reduce using rule 54 (postfix -> primary .)
    Semi            reduce using rule 54 (postfix -> primary .)
    RParen          reduce using rule 54 (postfix -> primary .)
    Comma           reduce using rule 54 (postfix -> primary .)
    Colon           reduce using rule 54 (postfix -> primary .)


state 32

    (82) primary -> LParen . expression RParen
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 61
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 33

    (80) primary -> Integer .

    Mul             reduce using rule 80 (primary -> Integer .)
    Div             reduce using rule 80 (primary -> Integer .)
    Mod             reduce using rule 80 (primary -> Integer .)
    Plus            reduce using rule 80 (primary -> Integer .)
    Minus           reduce using rule 80 (primary -> Integer .)
    Less            reduce using rule 80 (primary -> Integer .)
    Greater         reduce using rule 80 (primary -> Integer .)
    LessEqual       reduce using rule 80 (primary -> Integer .)
    GreaterEqual    reduce using rule 80 (primary -> Integer .)
    NotEqual        reduce using rule 80 (primary -> Integer .)
    Equal           reduce using rule 80 (primary -> Integer .)
    BitAnd          reduce using rule 80 (primary -> Integer .)
    Xor             reduce using rule 80 (primary -> Integer .)
    BitOr           reduce using rule 80 (primary -> Integer .)
    And             reduce using rule 80 (primary -> Integer .)
    Question        reduce using rule 80 (primary -> Integer .)
    Or              reduce using rule 80 (primary -> Integer .)
    Semi            reduce using rule 80 (primary -> Integer .)
    RParen          reduce using rule 80 (primary -> Integer .)
    Comma           reduce using rule 80 (primary -> Integer .)
    Colon           reduce using rule 80 (primary -> Integer .)


state 34

    (12) type_identifier_union -> type .
    (13) type_identifier_union -> type . Identifier

    RParen          reduce using rule 12 (type_identifier_union -> type .)
    Comma           reduce using rule 12 (type_identifier_union -> type .)
    Identifier      shift and go to state 62


state 35

    (8) function_def -> type Identifier LParen parameter_list . RParen LBrace block RBrace
    (9) function_decl -> type Identifier LParen parameter_list . RParen Semi
    (10) parameter_list -> parameter_list . Comma type_identifier_union

    RParen          shift and go to state 63
    Comma           shift and go to state 64


state 36

    (11) parameter_list -> type_identifier_union .

    RParen          reduce using rule 11 (parameter_list -> type_identifier_union .)
    Comma           reduce using rule 11 (parameter_list -> type_identifier_union .)


state 37

    (14) parameter_list -> empty .

    RParen          reduce using rule 14 (parameter_list -> empty .)
    Comma           reduce using rule 14 (parameter_list -> empty .)


state 38

    (62) assignment -> Identifier Assign . expression
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 65
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 39

    (58) postfix -> Identifier LParen . expression_list RParen
    (59) expression_list -> . expression_list Comma expression
    (60) expression_list -> . expression
    (61) expression_list -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Comma           reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression_list                shift and go to state 66
    expression                     shift and go to state 67
    empty                          shift and go to state 68
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 40

    (79) conditional -> logical_or Question . expression Colon conditional
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    logical_or                     shift and go to state 17
    expression                     shift and go to state 69
    conditional                    shift and go to state 16
    assignment                     shift and go to state 15
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 41

    (63) logical_or -> logical_or Or . logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    logical_and                    shift and go to state 70
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 42

    (64) logical_and -> logical_and And . bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    bit_or                         shift and go to state 71
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 43

    (65) bit_or -> bit_or BitOr . xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    xor                            shift and go to state 72
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 44

    (66) xor -> xor Xor . bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    bit_and                        shift and go to state 73
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 45

    (67) bit_and -> bit_and BitAnd . equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    equality                       shift and go to state 74
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 46

    (68) equality -> equality NotEqual . relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    relational                     shift and go to state 75
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 47

    (69) equality -> equality Equal . relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    relational                     shift and go to state 76
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 48

    (70) relational -> relational Less . additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    additive                       shift and go to state 77
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 49

    (71) relational -> relational Greater . additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    additive                       shift and go to state 78
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 50

    (72) relational -> relational LessEqual . additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    additive                       shift and go to state 79
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 51

    (73) relational -> relational GreaterEqual . additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    additive                       shift and go to state 80
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 52

    (74) additive -> additive Plus . multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    multiplicative                 shift and go to state 81
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 53

    (75) additive -> additive Minus . multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    multiplicative                 shift and go to state 82
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 54

    (76) multiplicative -> multiplicative Mul . unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    unary                          shift and go to state 83
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 55

    (77) multiplicative -> multiplicative Div . unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    unary                          shift and go to state 84
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 56

    (78) multiplicative -> multiplicative Mod . unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    unary                          shift and go to state 85
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 57

    (55) unary -> Minus unary .

    Mul             reduce using rule 55 (unary -> Minus unary .)
    Div             reduce using rule 55 (unary -> Minus unary .)
    Mod             reduce using rule 55 (unary -> Minus unary .)
    Plus            reduce using rule 55 (unary -> Minus unary .)
    Minus           reduce using rule 55 (unary -> Minus unary .)
    Less            reduce using rule 55 (unary -> Minus unary .)
    Greater         reduce using rule 55 (unary -> Minus unary .)
    LessEqual       reduce using rule 55 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 55 (unary -> Minus unary .)
    NotEqual        reduce using rule 55 (unary -> Minus unary .)
    Equal           reduce using rule 55 (unary -> Minus unary .)
    BitAnd          reduce using rule 55 (unary -> Minus unary .)
    Xor             reduce using rule 55 (unary -> Minus unary .)
    BitOr           reduce using rule 55 (unary -> Minus unary .)
    And             reduce using rule 55 (unary -> Minus unary .)
    Question        reduce using rule 55 (unary -> Minus unary .)
    Or              reduce using rule 55 (unary -> Minus unary .)
    Semi            reduce using rule 55 (unary -> Minus unary .)
    RParen          reduce using rule 55 (unary -> Minus unary .)
    Comma           reduce using rule 55 (unary -> Minus unary .)
    Colon           reduce using rule 55 (unary -> Minus unary .)


state 58

    (58) postfix -> Identifier . LParen expression_list RParen
    (81) primary -> Identifier .

    LParen          shift and go to state 39
    Mul             reduce using rule 81 (primary -> Identifier .)
    Div             reduce using rule 81 (primary -> Identifier .)
    Mod             reduce using rule 81 (primary -> Identifier .)
    Plus            reduce using rule 81 (primary -> Identifier .)
    Minus           reduce using rule 81 (primary -> Identifier .)
    Less            reduce using rule 81 (primary -> Identifier .)
    Greater         reduce using rule 81 (primary -> Identifier .)
    LessEqual       reduce using rule 81 (primary -> Identifier .)
    GreaterEqual    reduce using rule 81 (primary -> Identifier .)
    NotEqual        reduce using rule 81 (primary -> Identifier .)
    Equal           reduce using rule 81 (primary -> Identifier .)
    BitAnd          reduce using rule 81 (primary -> Identifier .)
    Xor             reduce using rule 81 (primary -> Identifier .)
    BitOr           reduce using rule 81 (primary -> Identifier .)
    And             reduce using rule 81 (primary -> Identifier .)
    Question        reduce using rule 81 (primary -> Identifier .)
    Or              reduce using rule 81 (primary -> Identifier .)
    Semi            reduce using rule 81 (primary -> Identifier .)
    RParen          reduce using rule 81 (primary -> Identifier .)
    Comma           reduce using rule 81 (primary -> Identifier .)
    Colon           reduce using rule 81 (primary -> Identifier .)


state 59

    (56) unary -> BitNot unary .

    Mul             reduce using rule 56 (unary -> BitNot unary .)
    Div             reduce using rule 56 (unary -> BitNot unary .)
    Mod             reduce using rule 56 (unary -> BitNot unary .)
    Plus            reduce using rule 56 (unary -> BitNot unary .)
    Minus           reduce using rule 56 (unary -> BitNot unary .)
    Less            reduce using rule 56 (unary -> BitNot unary .)
    Greater         reduce using rule 56 (unary -> BitNot unary .)
    LessEqual       reduce using rule 56 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 56 (unary -> BitNot unary .)
    NotEqual        reduce using rule 56 (unary -> BitNot unary .)
    Equal           reduce using rule 56 (unary -> BitNot unary .)
    BitAnd          reduce using rule 56 (unary -> BitNot unary .)
    Xor             reduce using rule 56 (unary -> BitNot unary .)
    BitOr           reduce using rule 56 (unary -> BitNot unary .)
    And             reduce using rule 56 (unary -> BitNot unary .)
    Question        reduce using rule 56 (unary -> BitNot unary .)
    Or              reduce using rule 56 (unary -> BitNot unary .)
    Semi            reduce using rule 56 (unary -> BitNot unary .)
    RParen          reduce using rule 56 (unary -> BitNot unary .)
    Comma           reduce using rule 56 (unary -> BitNot unary .)
    Colon           reduce using rule 56 (unary -> BitNot unary .)


state 60

    (57) unary -> Not unary .

    Mul             reduce using rule 57 (unary -> Not unary .)
    Div             reduce using rule 57 (unary -> Not unary .)
    Mod             reduce using rule 57 (unary -> Not unary .)
    Plus            reduce using rule 57 (unary -> Not unary .)
    Minus           reduce using rule 57 (unary -> Not unary .)
    Less            reduce using rule 57 (unary -> Not unary .)
    Greater         reduce using rule 57 (unary -> Not unary .)
    LessEqual       reduce using rule 57 (unary -> Not unary .)
    GreaterEqual    reduce using rule 57 (unary -> Not unary .)
    NotEqual        reduce using rule 57 (unary -> Not unary .)
    Equal           reduce using rule 57 (unary -> Not unary .)
    BitAnd          reduce using rule 57 (unary -> Not unary .)
    Xor             reduce using rule 57 (unary -> Not unary .)
    BitOr           reduce using rule 57 (unary -> Not unary .)
    And             reduce using rule 57 (unary -> Not unary .)
    Question        reduce using rule 57 (unary -> Not unary .)
    Or              reduce using rule 57 (unary -> Not unary .)
    Semi            reduce using rule 57 (unary -> Not unary .)
    RParen          reduce using rule 57 (unary -> Not unary .)
    Comma           reduce using rule 57 (unary -> Not unary .)
    Colon           reduce using rule 57 (unary -> Not unary .)


state 61

    (82) primary -> LParen expression . RParen

    RParen          shift and go to state 86


state 62

    (13) type_identifier_union -> type Identifier .

    RParen          reduce using rule 13 (type_identifier_union -> type Identifier .)
    Comma           reduce using rule 13 (type_identifier_union -> type Identifier .)


state 63

    (8) function_def -> type Identifier LParen parameter_list RParen . LBrace block RBrace
    (9) function_decl -> type Identifier LParen parameter_list RParen . Semi

    LBrace          shift and go to state 87
    Semi            shift and go to state 88


state 64

    (10) parameter_list -> parameter_list Comma . type_identifier_union
    (12) type_identifier_union -> . type
    (13) type_identifier_union -> . type Identifier
    (5) type -> . Int

    Int             shift and go to state 8

    type_identifier_union          shift and go to state 89
    type                           shift and go to state 34

state 65

    (62) assignment -> Identifier Assign expression .

    Semi            reduce using rule 62 (assignment -> Identifier Assign expression .)
    RParen          reduce using rule 62 (assignment -> Identifier Assign expression .)
    Comma           reduce using rule 62 (assignment -> Identifier Assign expression .)
    Colon           reduce using rule 62 (assignment -> Identifier Assign expression .)


state 66

    (58) postfix -> Identifier LParen expression_list . RParen
    (59) expression_list -> expression_list . Comma expression

    RParen          shift and go to state 90
    Comma           shift and go to state 91


state 67

    (60) expression_list -> expression .

    RParen          reduce using rule 60 (expression_list -> expression .)
    Comma           reduce using rule 60 (expression_list -> expression .)


state 68

    (61) expression_list -> empty .

    RParen          reduce using rule 61 (expression_list -> empty .)
    Comma           reduce using rule 61 (expression_list -> empty .)


state 69

    (79) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 92


state 70

    (63) logical_or -> logical_or Or logical_and .
    (64) logical_and -> logical_and . And bit_or

    Question        reduce using rule 63 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 63 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 63 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 63 (logical_or -> logical_or Or logical_and .)
    Comma           reduce using rule 63 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 63 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 42


state 71

    (64) logical_and -> logical_and And bit_or .
    (65) bit_or -> bit_or . BitOr xor

    And             reduce using rule 64 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 64 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 64 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 64 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 64 (logical_and -> logical_and And bit_or .)
    Comma           reduce using rule 64 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 64 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 43


state 72

    (65) bit_or -> bit_or BitOr xor .
    (66) xor -> xor . Xor bit_and

    BitOr           reduce using rule 65 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 65 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 65 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 65 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 65 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 65 (bit_or -> bit_or BitOr xor .)
    Comma           reduce using rule 65 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 65 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 44


state 73

    (66) xor -> xor Xor bit_and .
    (67) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 66 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 66 (xor -> xor Xor bit_and .)
    And             reduce using rule 66 (xor -> xor Xor bit_and .)
    Question        reduce using rule 66 (xor -> xor Xor bit_and .)
    Or              reduce using rule 66 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 66 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 66 (xor -> xor Xor bit_and .)
    Comma           reduce using rule 66 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 66 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 45


state 74

    (67) bit_and -> bit_and BitAnd equality .
    (68) equality -> equality . NotEqual relational
    (69) equality -> equality . Equal relational

    BitAnd          reduce using rule 67 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 67 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 67 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 67 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 67 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 67 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 67 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 67 (bit_and -> bit_and BitAnd equality .)
    Comma           reduce using rule 67 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 67 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 46
    Equal           shift and go to state 47


state 75

    (68) equality -> equality NotEqual relational .
    (70) relational -> relational . Less additive
    (71) relational -> relational . Greater additive
    (72) relational -> relational . LessEqual additive
    (73) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 68 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 68 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 68 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 68 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 68 (equality -> equality NotEqual relational .)
    And             reduce using rule 68 (equality -> equality NotEqual relational .)
    Question        reduce using rule 68 (equality -> equality NotEqual relational .)
    Or              reduce using rule 68 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 68 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 68 (equality -> equality NotEqual relational .)
    Comma           reduce using rule 68 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 68 (equality -> equality NotEqual relational .)
    Less            shift and go to state 48
    Greater         shift and go to state 49
    LessEqual       shift and go to state 50
    GreaterEqual    shift and go to state 51


state 76

    (69) equality -> equality Equal relational .
    (70) relational -> relational . Less additive
    (71) relational -> relational . Greater additive
    (72) relational -> relational . LessEqual additive
    (73) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 69 (equality -> equality Equal relational .)
    Equal           reduce using rule 69 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 69 (equality -> equality Equal relational .)
    Xor             reduce using rule 69 (equality -> equality Equal relational .)
    BitOr           reduce using rule 69 (equality -> equality Equal relational .)
    And             reduce using rule 69 (equality -> equality Equal relational .)
    Question        reduce using rule 69 (equality -> equality Equal relational .)
    Or              reduce using rule 69 (equality -> equality Equal relational .)
    Semi            reduce using rule 69 (equality -> equality Equal relational .)
    RParen          reduce using rule 69 (equality -> equality Equal relational .)
    Comma           reduce using rule 69 (equality -> equality Equal relational .)
    Colon           reduce using rule 69 (equality -> equality Equal relational .)
    Less            shift and go to state 48
    Greater         shift and go to state 49
    LessEqual       shift and go to state 50
    GreaterEqual    shift and go to state 51


state 77

    (70) relational -> relational Less additive .
    (74) additive -> additive . Plus multiplicative
    (75) additive -> additive . Minus multiplicative

    Less            reduce using rule 70 (relational -> relational Less additive .)
    Greater         reduce using rule 70 (relational -> relational Less additive .)
    LessEqual       reduce using rule 70 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 70 (relational -> relational Less additive .)
    NotEqual        reduce using rule 70 (relational -> relational Less additive .)
    Equal           reduce using rule 70 (relational -> relational Less additive .)
    BitAnd          reduce using rule 70 (relational -> relational Less additive .)
    Xor             reduce using rule 70 (relational -> relational Less additive .)
    BitOr           reduce using rule 70 (relational -> relational Less additive .)
    And             reduce using rule 70 (relational -> relational Less additive .)
    Question        reduce using rule 70 (relational -> relational Less additive .)
    Or              reduce using rule 70 (relational -> relational Less additive .)
    Semi            reduce using rule 70 (relational -> relational Less additive .)
    RParen          reduce using rule 70 (relational -> relational Less additive .)
    Comma           reduce using rule 70 (relational -> relational Less additive .)
    Colon           reduce using rule 70 (relational -> relational Less additive .)
    Plus            shift and go to state 52
    Minus           shift and go to state 53


state 78

    (71) relational -> relational Greater additive .
    (74) additive -> additive . Plus multiplicative
    (75) additive -> additive . Minus multiplicative

    Less            reduce using rule 71 (relational -> relational Greater additive .)
    Greater         reduce using rule 71 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 71 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 71 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 71 (relational -> relational Greater additive .)
    Equal           reduce using rule 71 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 71 (relational -> relational Greater additive .)
    Xor             reduce using rule 71 (relational -> relational Greater additive .)
    BitOr           reduce using rule 71 (relational -> relational Greater additive .)
    And             reduce using rule 71 (relational -> relational Greater additive .)
    Question        reduce using rule 71 (relational -> relational Greater additive .)
    Or              reduce using rule 71 (relational -> relational Greater additive .)
    Semi            reduce using rule 71 (relational -> relational Greater additive .)
    RParen          reduce using rule 71 (relational -> relational Greater additive .)
    Comma           reduce using rule 71 (relational -> relational Greater additive .)
    Colon           reduce using rule 71 (relational -> relational Greater additive .)
    Plus            shift and go to state 52
    Minus           shift and go to state 53


state 79

    (72) relational -> relational LessEqual additive .
    (74) additive -> additive . Plus multiplicative
    (75) additive -> additive . Minus multiplicative

    Less            reduce using rule 72 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 72 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 72 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 72 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 72 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 72 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 72 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 72 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 72 (relational -> relational LessEqual additive .)
    And             reduce using rule 72 (relational -> relational LessEqual additive .)
    Question        reduce using rule 72 (relational -> relational LessEqual additive .)
    Or              reduce using rule 72 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 72 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 72 (relational -> relational LessEqual additive .)
    Comma           reduce using rule 72 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 72 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 52
    Minus           shift and go to state 53


state 80

    (73) relational -> relational GreaterEqual additive .
    (74) additive -> additive . Plus multiplicative
    (75) additive -> additive . Minus multiplicative

    Less            reduce using rule 73 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 73 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 73 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 73 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 73 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 73 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 73 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 73 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 73 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 73 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 73 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 73 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 73 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 73 (relational -> relational GreaterEqual additive .)
    Comma           reduce using rule 73 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 73 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 52
    Minus           shift and go to state 53


state 81

    (74) additive -> additive Plus multiplicative .
    (76) multiplicative -> multiplicative . Mul unary
    (77) multiplicative -> multiplicative . Div unary
    (78) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 74 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 74 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 74 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 74 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 74 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 74 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 74 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 74 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 74 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 74 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 74 (additive -> additive Plus multiplicative .)
    And             reduce using rule 74 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 74 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 74 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 74 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 74 (additive -> additive Plus multiplicative .)
    Comma           reduce using rule 74 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 74 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 54
    Div             shift and go to state 55
    Mod             shift and go to state 56


state 82

    (75) additive -> additive Minus multiplicative .
    (76) multiplicative -> multiplicative . Mul unary
    (77) multiplicative -> multiplicative . Div unary
    (78) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 75 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 75 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 75 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 75 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 75 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 75 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 75 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 75 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 75 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 75 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 75 (additive -> additive Minus multiplicative .)
    And             reduce using rule 75 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 75 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 75 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 75 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 75 (additive -> additive Minus multiplicative .)
    Comma           reduce using rule 75 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 75 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 54
    Div             shift and go to state 55
    Mod             shift and go to state 56


state 83

    (76) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    Comma           reduce using rule 76 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 76 (multiplicative -> multiplicative Mul unary .)


state 84

    (77) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    Comma           reduce using rule 77 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 77 (multiplicative -> multiplicative Div unary .)


state 85

    (78) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    Comma           reduce using rule 78 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 78 (multiplicative -> multiplicative Mod unary .)


state 86

    (82) primary -> LParen expression RParen .

    Mul             reduce using rule 82 (primary -> LParen expression RParen .)
    Div             reduce using rule 82 (primary -> LParen expression RParen .)
    Mod             reduce using rule 82 (primary -> LParen expression RParen .)
    Plus            reduce using rule 82 (primary -> LParen expression RParen .)
    Minus           reduce using rule 82 (primary -> LParen expression RParen .)
    Less            reduce using rule 82 (primary -> LParen expression RParen .)
    Greater         reduce using rule 82 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 82 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 82 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 82 (primary -> LParen expression RParen .)
    Equal           reduce using rule 82 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 82 (primary -> LParen expression RParen .)
    Xor             reduce using rule 82 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 82 (primary -> LParen expression RParen .)
    And             reduce using rule 82 (primary -> LParen expression RParen .)
    Question        reduce using rule 82 (primary -> LParen expression RParen .)
    Or              reduce using rule 82 (primary -> LParen expression RParen .)
    Semi            reduce using rule 82 (primary -> LParen expression RParen .)
    RParen          reduce using rule 82 (primary -> LParen expression RParen .)
    Comma           reduce using rule 82 (primary -> LParen expression RParen .)
    Colon           reduce using rule 82 (primary -> LParen expression RParen .)


state 87

    (8) function_def -> type Identifier LParen parameter_list RParen LBrace . block RBrace
    (15) block -> . block block_item
    (16) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 93
    empty                          shift and go to state 94

state 88

    (9) function_decl -> type Identifier LParen parameter_list RParen Semi .

    Int             reduce using rule 9 (function_decl -> type Identifier LParen parameter_list RParen Semi .)
    $end            reduce using rule 9 (function_decl -> type Identifier LParen parameter_list RParen Semi .)


state 89

    (10) parameter_list -> parameter_list Comma type_identifier_union .

    RParen          reduce using rule 10 (parameter_list -> parameter_list Comma type_identifier_union .)
    Comma           reduce using rule 10 (parameter_list -> parameter_list Comma type_identifier_union .)


state 90

    (58) postfix -> Identifier LParen expression_list RParen .

    Mul             reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    Div             reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    Mod             reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    Plus            reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    Minus           reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    Less            reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    Greater         reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    LessEqual       reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    GreaterEqual    reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    NotEqual        reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    Equal           reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    BitAnd          reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    Xor             reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    BitOr           reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    And             reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    Question        reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    Or              reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    Semi            reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    RParen          reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    Comma           reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)
    Colon           reduce using rule 58 (postfix -> Identifier LParen expression_list RParen .)


state 91

    (59) expression_list -> expression_list Comma . expression
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 95
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 92

    (79) conditional -> logical_or Question expression Colon . conditional
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Identifier      shift and go to state 58
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    logical_or                     shift and go to state 17
    conditional                    shift and go to state 96
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 93

    (8) function_def -> type Identifier LParen parameter_list RParen LBrace block . RBrace
    (15) block -> block . block_item
    (17) block_item -> . statement
    (18) block_item -> . declaration Semi
    (19) statement -> . statement_matched
    (20) statement -> . statement_unmatched
    (39) declaration -> . type Identifier
    (40) declaration -> . type Identifier Assign expression
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (5) type -> . Int
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    RBrace          shift and go to state 99
    If              shift and go to state 106
    While           shift and go to state 107
    Do              shift and go to state 108
    For             shift and go to state 109
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Int             shift and go to state 8
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    type                           shift and go to state 97
    block_item                     shift and go to state 100
    statement                      shift and go to state 101
    declaration                    shift and go to state 102
    statement_matched              shift and go to state 103
    statement_unmatched            shift and go to state 104
    expression                     shift and go to state 105
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 94

    (16) block -> empty .

    RBrace          reduce using rule 16 (block -> empty .)
    If              reduce using rule 16 (block -> empty .)
    While           reduce using rule 16 (block -> empty .)
    Do              reduce using rule 16 (block -> empty .)
    For             reduce using rule 16 (block -> empty .)
    Return          reduce using rule 16 (block -> empty .)
    LBrace          reduce using rule 16 (block -> empty .)
    Break           reduce using rule 16 (block -> empty .)
    Continue        reduce using rule 16 (block -> empty .)
    Int             reduce using rule 16 (block -> empty .)
    Identifier      reduce using rule 16 (block -> empty .)
    Minus           reduce using rule 16 (block -> empty .)
    BitNot          reduce using rule 16 (block -> empty .)
    Not             reduce using rule 16 (block -> empty .)
    Integer         reduce using rule 16 (block -> empty .)
    LParen          reduce using rule 16 (block -> empty .)
    Semi            reduce using rule 16 (block -> empty .)


state 95

    (59) expression_list -> expression_list Comma expression .

    RParen          reduce using rule 59 (expression_list -> expression_list Comma expression .)
    Comma           reduce using rule 59 (expression_list -> expression_list Comma expression .)


state 96

    (79) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 79 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 79 (conditional -> logical_or Question expression Colon conditional .)
    Comma           reduce using rule 79 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 79 (conditional -> logical_or Question expression Colon conditional .)


state 97

    (39) declaration -> type . Identifier
    (40) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 115


state 98

    (34) statement_matched -> LBrace . block RBrace
    (15) block -> . block block_item
    (16) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 116
    empty                          shift and go to state 94

state 99

    (8) function_def -> type Identifier LParen parameter_list RParen LBrace block RBrace .

    Int             reduce using rule 8 (function_def -> type Identifier LParen parameter_list RParen LBrace block RBrace .)
    $end            reduce using rule 8 (function_def -> type Identifier LParen parameter_list RParen LBrace block RBrace .)


state 100

    (15) block -> block block_item .

    RBrace          reduce using rule 15 (block -> block block_item .)
    If              reduce using rule 15 (block -> block block_item .)
    While           reduce using rule 15 (block -> block block_item .)
    Do              reduce using rule 15 (block -> block block_item .)
    For             reduce using rule 15 (block -> block block_item .)
    Return          reduce using rule 15 (block -> block block_item .)
    LBrace          reduce using rule 15 (block -> block block_item .)
    Break           reduce using rule 15 (block -> block block_item .)
    Continue        reduce using rule 15 (block -> block block_item .)
    Int             reduce using rule 15 (block -> block block_item .)
    Identifier      reduce using rule 15 (block -> block block_item .)
    Minus           reduce using rule 15 (block -> block block_item .)
    BitNot          reduce using rule 15 (block -> block block_item .)
    Not             reduce using rule 15 (block -> block block_item .)
    Integer         reduce using rule 15 (block -> block block_item .)
    LParen          reduce using rule 15 (block -> block block_item .)
    Semi            reduce using rule 15 (block -> block block_item .)


state 101

    (17) block_item -> statement .

    RBrace          reduce using rule 17 (block_item -> statement .)
    If              reduce using rule 17 (block_item -> statement .)
    While           reduce using rule 17 (block_item -> statement .)
    Do              reduce using rule 17 (block_item -> statement .)
    For             reduce using rule 17 (block_item -> statement .)
    Return          reduce using rule 17 (block_item -> statement .)
    LBrace          reduce using rule 17 (block_item -> statement .)
    Break           reduce using rule 17 (block_item -> statement .)
    Continue        reduce using rule 17 (block_item -> statement .)
    Int             reduce using rule 17 (block_item -> statement .)
    Identifier      reduce using rule 17 (block_item -> statement .)
    Minus           reduce using rule 17 (block_item -> statement .)
    BitNot          reduce using rule 17 (block_item -> statement .)
    Not             reduce using rule 17 (block_item -> statement .)
    Integer         reduce using rule 17 (block_item -> statement .)
    LParen          reduce using rule 17 (block_item -> statement .)
    Semi            reduce using rule 17 (block_item -> statement .)


state 102

    (18) block_item -> declaration . Semi

    Semi            shift and go to state 117


state 103

    (19) statement -> statement_matched .

    RBrace          reduce using rule 19 (statement -> statement_matched .)
    If              reduce using rule 19 (statement -> statement_matched .)
    While           reduce using rule 19 (statement -> statement_matched .)
    Do              reduce using rule 19 (statement -> statement_matched .)
    For             reduce using rule 19 (statement -> statement_matched .)
    Return          reduce using rule 19 (statement -> statement_matched .)
    LBrace          reduce using rule 19 (statement -> statement_matched .)
    Break           reduce using rule 19 (statement -> statement_matched .)
    Continue        reduce using rule 19 (statement -> statement_matched .)
    Int             reduce using rule 19 (statement -> statement_matched .)
    Identifier      reduce using rule 19 (statement -> statement_matched .)
    Minus           reduce using rule 19 (statement -> statement_matched .)
    BitNot          reduce using rule 19 (statement -> statement_matched .)
    Not             reduce using rule 19 (statement -> statement_matched .)
    Integer         reduce using rule 19 (statement -> statement_matched .)
    LParen          reduce using rule 19 (statement -> statement_matched .)
    Semi            reduce using rule 19 (statement -> statement_matched .)


state 104

    (20) statement -> statement_unmatched .

    RBrace          reduce using rule 20 (statement -> statement_unmatched .)
    If              reduce using rule 20 (statement -> statement_unmatched .)
    While           reduce using rule 20 (statement -> statement_unmatched .)
    Do              reduce using rule 20 (statement -> statement_unmatched .)
    For             reduce using rule 20 (statement -> statement_unmatched .)
    Return          reduce using rule 20 (statement -> statement_unmatched .)
    LBrace          reduce using rule 20 (statement -> statement_unmatched .)
    Break           reduce using rule 20 (statement -> statement_unmatched .)
    Continue        reduce using rule 20 (statement -> statement_unmatched .)
    Int             reduce using rule 20 (statement -> statement_unmatched .)
    Identifier      reduce using rule 20 (statement -> statement_unmatched .)
    Minus           reduce using rule 20 (statement -> statement_unmatched .)
    BitNot          reduce using rule 20 (statement -> statement_unmatched .)
    Not             reduce using rule 20 (statement -> statement_unmatched .)
    Integer         reduce using rule 20 (statement -> statement_unmatched .)
    LParen          reduce using rule 20 (statement -> statement_unmatched .)
    Semi            reduce using rule 20 (statement -> statement_unmatched .)


state 105

    (37) opt_expression -> expression .

    Semi            reduce using rule 37 (opt_expression -> expression .)
    RParen          reduce using rule 37 (opt_expression -> expression .)


state 106

    (21) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (22) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 118


state 107

    (24) statement_matched -> While . LParen expression RParen statement_matched
    (25) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 119


state 108

    (26) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (27) statement_unmatched -> Do . statement_unmatched While LParen expression RParen Semi
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    If              shift and go to state 106
    While           shift and go to state 107
    Do              shift and go to state 108
    For             shift and go to state 109
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    statement_matched              shift and go to state 120
    expression                     shift and go to state 105
    statement_unmatched            shift and go to state 121
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 109

    (28) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    LParen          shift and go to state 122


state 110

    (33) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 123


state 111

    (32) statement_matched -> Return . expression Semi
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 124
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 112

    (35) statement_matched -> Break . Semi

    Semi            shift and go to state 125


state 113

    (36) statement_matched -> Continue . Semi

    Semi            shift and go to state 126


state 114

    (38) opt_expression -> empty .

    Semi            reduce using rule 38 (opt_expression -> empty .)
    RParen          reduce using rule 38 (opt_expression -> empty .)


state 115

    (39) declaration -> type Identifier .
    (40) declaration -> type Identifier . Assign expression

    Semi            reduce using rule 39 (declaration -> type Identifier .)
    Assign          shift and go to state 11


state 116

    (34) statement_matched -> LBrace block . RBrace
    (15) block -> block . block_item
    (17) block_item -> . statement
    (18) block_item -> . declaration Semi
    (19) statement -> . statement_matched
    (20) statement -> . statement_unmatched
    (39) declaration -> . type Identifier
    (40) declaration -> . type Identifier Assign expression
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (5) type -> . Int
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    RBrace          shift and go to state 127
    If              shift and go to state 106
    While           shift and go to state 107
    Do              shift and go to state 108
    For             shift and go to state 109
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Int             shift and go to state 8
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    block_item                     shift and go to state 100
    statement                      shift and go to state 101
    declaration                    shift and go to state 102
    statement_matched              shift and go to state 103
    statement_unmatched            shift and go to state 104
    type                           shift and go to state 97
    expression                     shift and go to state 105
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 117

    (18) block_item -> declaration Semi .

    RBrace          reduce using rule 18 (block_item -> declaration Semi .)
    If              reduce using rule 18 (block_item -> declaration Semi .)
    While           reduce using rule 18 (block_item -> declaration Semi .)
    Do              reduce using rule 18 (block_item -> declaration Semi .)
    For             reduce using rule 18 (block_item -> declaration Semi .)
    Return          reduce using rule 18 (block_item -> declaration Semi .)
    LBrace          reduce using rule 18 (block_item -> declaration Semi .)
    Break           reduce using rule 18 (block_item -> declaration Semi .)
    Continue        reduce using rule 18 (block_item -> declaration Semi .)
    Int             reduce using rule 18 (block_item -> declaration Semi .)
    Identifier      reduce using rule 18 (block_item -> declaration Semi .)
    Minus           reduce using rule 18 (block_item -> declaration Semi .)
    BitNot          reduce using rule 18 (block_item -> declaration Semi .)
    Not             reduce using rule 18 (block_item -> declaration Semi .)
    Integer         reduce using rule 18 (block_item -> declaration Semi .)
    LParen          reduce using rule 18 (block_item -> declaration Semi .)
    Semi            reduce using rule 18 (block_item -> declaration Semi .)


state 118

    (21) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (22) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> If LParen . expression RParen statement
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 128
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 119

    (24) statement_matched -> While LParen . expression RParen statement_matched
    (25) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 129
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 120

    (26) statement_matched -> Do statement_matched . While LParen expression RParen Semi

    While           shift and go to state 130


state 121

    (27) statement_unmatched -> Do statement_unmatched . While LParen expression RParen Semi

    While           shift and go to state 131


state 122

    (28) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (39) declaration -> . type Identifier
    (40) declaration -> . type Identifier Assign expression
    (41) expression -> . assignment
    (1) empty -> .
    (5) type -> . Int
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 8
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 132
    declaration                    shift and go to state 133
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    type                           shift and go to state 97
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 123

    (33) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 33 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 33 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 33 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 33 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 33 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 33 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 33 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 33 (statement_matched -> opt_expression Semi .)


state 124

    (32) statement_matched -> Return expression . Semi

    Semi            shift and go to state 134


state 125

    (35) statement_matched -> Break Semi .

    RBrace          reduce using rule 35 (statement_matched -> Break Semi .)
    If              reduce using rule 35 (statement_matched -> Break Semi .)
    While           reduce using rule 35 (statement_matched -> Break Semi .)
    Do              reduce using rule 35 (statement_matched -> Break Semi .)
    For             reduce using rule 35 (statement_matched -> Break Semi .)
    Return          reduce using rule 35 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 35 (statement_matched -> Break Semi .)
    Break           reduce using rule 35 (statement_matched -> Break Semi .)
    Continue        reduce using rule 35 (statement_matched -> Break Semi .)
    Int             reduce using rule 35 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 35 (statement_matched -> Break Semi .)
    Minus           reduce using rule 35 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 35 (statement_matched -> Break Semi .)
    Not             reduce using rule 35 (statement_matched -> Break Semi .)
    Integer         reduce using rule 35 (statement_matched -> Break Semi .)
    LParen          reduce using rule 35 (statement_matched -> Break Semi .)
    Semi            reduce using rule 35 (statement_matched -> Break Semi .)
    Else            reduce using rule 35 (statement_matched -> Break Semi .)


state 126

    (36) statement_matched -> Continue Semi .

    RBrace          reduce using rule 36 (statement_matched -> Continue Semi .)
    If              reduce using rule 36 (statement_matched -> Continue Semi .)
    While           reduce using rule 36 (statement_matched -> Continue Semi .)
    Do              reduce using rule 36 (statement_matched -> Continue Semi .)
    For             reduce using rule 36 (statement_matched -> Continue Semi .)
    Return          reduce using rule 36 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 36 (statement_matched -> Continue Semi .)
    Break           reduce using rule 36 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 36 (statement_matched -> Continue Semi .)
    Int             reduce using rule 36 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 36 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 36 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 36 (statement_matched -> Continue Semi .)
    Not             reduce using rule 36 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 36 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 36 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 36 (statement_matched -> Continue Semi .)
    Else            reduce using rule 36 (statement_matched -> Continue Semi .)


state 127

    (34) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 34 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 34 (statement_matched -> LBrace block RBrace .)


state 128

    (21) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (22) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 135


state 129

    (24) statement_matched -> While LParen expression . RParen statement_matched
    (25) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 136


state 130

    (26) statement_matched -> Do statement_matched While . LParen expression RParen Semi

    LParen          shift and go to state 137


state 131

    (27) statement_unmatched -> Do statement_unmatched While . LParen expression RParen Semi

    LParen          shift and go to state 138


state 132

    (28) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched
    (30) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 139


state 133

    (29) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 140


state 134

    (32) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 32 (statement_matched -> Return expression Semi .)
    If              reduce using rule 32 (statement_matched -> Return expression Semi .)
    While           reduce using rule 32 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 32 (statement_matched -> Return expression Semi .)
    For             reduce using rule 32 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 32 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 32 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 32 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 32 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 32 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 32 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 32 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 32 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 32 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 32 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 32 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 32 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 32 (statement_matched -> Return expression Semi .)


state 135

    (21) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (22) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (23) statement_unmatched -> If LParen expression RParen . statement
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (19) statement -> . statement_matched
    (20) statement -> . statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    If              shift and go to state 106
    While           shift and go to state 107
    Do              shift and go to state 108
    For             shift and go to state 109
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 105
    statement_matched              shift and go to state 141
    statement_unmatched            shift and go to state 104
    statement                      shift and go to state 142
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 136

    (24) statement_matched -> While LParen expression RParen . statement_matched
    (25) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    If              shift and go to state 106
    While           shift and go to state 107
    Do              shift and go to state 108
    For             shift and go to state 109
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 105
    statement_matched              shift and go to state 143
    statement_unmatched            shift and go to state 144
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 137

    (26) statement_matched -> Do statement_matched While LParen . expression RParen Semi
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 145
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 138

    (27) statement_unmatched -> Do statement_unmatched While LParen . expression RParen Semi
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 146
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 139

    (28) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (30) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 147
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 140

    (29) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 148
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 141

    (21) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (22) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (19) statement -> statement_matched .

    Else            shift and go to state 149
    RBrace          reduce using rule 19 (statement -> statement_matched .)
    If              reduce using rule 19 (statement -> statement_matched .)
    While           reduce using rule 19 (statement -> statement_matched .)
    Do              reduce using rule 19 (statement -> statement_matched .)
    For             reduce using rule 19 (statement -> statement_matched .)
    Return          reduce using rule 19 (statement -> statement_matched .)
    LBrace          reduce using rule 19 (statement -> statement_matched .)
    Break           reduce using rule 19 (statement -> statement_matched .)
    Continue        reduce using rule 19 (statement -> statement_matched .)
    Int             reduce using rule 19 (statement -> statement_matched .)
    Identifier      reduce using rule 19 (statement -> statement_matched .)
    Minus           reduce using rule 19 (statement -> statement_matched .)
    BitNot          reduce using rule 19 (statement -> statement_matched .)
    Not             reduce using rule 19 (statement -> statement_matched .)
    Integer         reduce using rule 19 (statement -> statement_matched .)
    LParen          reduce using rule 19 (statement -> statement_matched .)
    Semi            reduce using rule 19 (statement -> statement_matched .)


state 142

    (23) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 23 (statement_unmatched -> If LParen expression RParen statement .)


state 143

    (24) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 24 (statement_matched -> While LParen expression RParen statement_matched .)


state 144

    (25) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 25 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 145

    (26) statement_matched -> Do statement_matched While LParen expression . RParen Semi

    RParen          shift and go to state 150


state 146

    (27) statement_unmatched -> Do statement_unmatched While LParen expression . RParen Semi

    RParen          shift and go to state 151


state 147

    (28) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched
    (30) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 152


state 148

    (29) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched
    (31) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 153


state 149

    (21) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (22) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    If              shift and go to state 106
    While           shift and go to state 107
    Do              shift and go to state 108
    For             shift and go to state 109
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 105
    statement_matched              shift and go to state 154
    statement_unmatched            shift and go to state 155
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 150

    (26) statement_matched -> Do statement_matched While LParen expression RParen . Semi

    Semi            shift and go to state 156


state 151

    (27) statement_unmatched -> Do statement_unmatched While LParen expression RParen . Semi

    Semi            shift and go to state 157


state 152

    (28) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (30) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 158
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 153

    (29) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (31) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 159
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 154

    (21) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 21 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 155

    (22) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 22 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 156

    (26) statement_matched -> Do statement_matched While LParen expression RParen Semi .

    RBrace          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    If              reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    While           reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Do              reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    For             reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Return          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LBrace          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Break           reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Continue        reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Int             reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Identifier      reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Minus           reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    BitNot          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Not             reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Integer         reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LParen          reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Semi            reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Else            reduce using rule 26 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)


state 157

    (27) statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .

    RBrace          reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    If              reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    While           reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Do              reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    For             reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Return          reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LBrace          reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Break           reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Continue        reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Int             reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Identifier      reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Minus           reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    BitNot          reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Not             reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Integer         reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LParen          reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Semi            reduce using rule 27 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)


state 158

    (28) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched
    (30) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 160


state 159

    (29) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched
    (31) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched

    RParen          shift and go to state 162
    Semi            shift and go to state 161


state 160

    (28) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (30) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    If              shift and go to state 106
    While           shift and go to state 107
    Do              shift and go to state 108
    For             shift and go to state 109
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 110
    statement_matched              shift and go to state 163
    statement_unmatched            shift and go to state 164
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 161

    (31) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 165
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 162

    (29) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    If              shift and go to state 168
    While           shift and go to state 169
    Do              shift and go to state 170
    For             shift and go to state 166
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 110
    statement_matched              shift and go to state 167
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 163

    (28) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .

    RBrace          reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 28 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)


state 164

    (30) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 30 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 165

    (31) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 171


state 166

    (28) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched

    LParen          shift and go to state 172


state 167

    (29) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .

    RBrace          reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 29 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)


state 168

    (21) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched

    LParen          shift and go to state 173


state 169

    (24) statement_matched -> While . LParen expression RParen statement_matched

    LParen          shift and go to state 174


state 170

    (26) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    If              shift and go to state 168
    While           shift and go to state 169
    Do              shift and go to state 170
    For             shift and go to state 166
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    statement_matched              shift and go to state 120
    expression                     shift and go to state 105
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 171

    (31) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    If              shift and go to state 177
    While           shift and go to state 178
    Do              shift and go to state 179
    For             shift and go to state 175

    statement_unmatched            shift and go to state 176

state 172

    (28) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (39) declaration -> . type Identifier
    (40) declaration -> . type Identifier Assign expression
    (41) expression -> . assignment
    (1) empty -> .
    (5) type -> . Int
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 8
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 180
    declaration                    shift and go to state 181
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    type                           shift and go to state 97
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 173

    (21) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 182
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 174

    (24) statement_matched -> While LParen . expression RParen statement_matched
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 183
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 175

    (30) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    LParen          shift and go to state 184


state 176

    (31) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 31 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 177

    (22) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 185


state 178

    (25) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 186


state 179

    (27) statement_unmatched -> Do . statement_unmatched While LParen expression RParen Semi
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    If              shift and go to state 177
    While           shift and go to state 178
    Do              shift and go to state 179
    For             shift and go to state 175

    statement_unmatched            shift and go to state 121

state 180

    (28) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 187


state 181

    (29) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 188


state 182

    (21) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched

    RParen          shift and go to state 189


state 183

    (24) statement_matched -> While LParen expression . RParen statement_matched

    RParen          shift and go to state 190


state 184

    (30) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (39) declaration -> . type Identifier
    (40) declaration -> . type Identifier Assign expression
    (41) expression -> . assignment
    (1) empty -> .
    (5) type -> . Int
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 8
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 191
    declaration                    shift and go to state 192
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    type                           shift and go to state 97
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 185

    (22) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> If LParen . expression RParen statement
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 193
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 186

    (25) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (41) expression -> . assignment
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 194
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 187

    (28) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 195
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 188

    (29) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 196
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 189

    (21) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    If              shift and go to state 168
    While           shift and go to state 169
    Do              shift and go to state 170
    For             shift and go to state 166
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 105
    statement_matched              shift and go to state 197
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 190

    (24) statement_matched -> While LParen expression RParen . statement_matched
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    If              shift and go to state 168
    While           shift and go to state 169
    Do              shift and go to state 170
    For             shift and go to state 166
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 105
    statement_matched              shift and go to state 143
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 191

    (30) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 198


state 192

    (31) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 199


state 193

    (22) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 200


state 194

    (25) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 201


state 195

    (28) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 202


state 196

    (29) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 203


state 197

    (21) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched

    Else            shift and go to state 204


state 198

    (30) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 205
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 199

    (31) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 206
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 200

    (22) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (23) statement_unmatched -> If LParen expression RParen . statement
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (19) statement -> . statement_matched
    (20) statement -> . statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    If              shift and go to state 106
    While           shift and go to state 107
    Do              shift and go to state 108
    For             shift and go to state 109
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 105
    statement_matched              shift and go to state 207
    statement_unmatched            shift and go to state 104
    statement                      shift and go to state 142
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 201

    (25) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    If              shift and go to state 177
    While           shift and go to state 178
    Do              shift and go to state 179
    For             shift and go to state 175

    statement_unmatched            shift and go to state 144

state 202

    (28) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 208
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 203

    (29) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 209
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 204

    (21) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    If              shift and go to state 168
    While           shift and go to state 169
    Do              shift and go to state 170
    For             shift and go to state 166
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    expression                     shift and go to state 105
    statement_matched              shift and go to state 154
    opt_expression                 shift and go to state 110
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 205

    (30) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 210


state 206

    (31) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 211


state 207

    (22) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (19) statement -> statement_matched .

    Else            shift and go to state 212
    RBrace          reduce using rule 19 (statement -> statement_matched .)
    If              reduce using rule 19 (statement -> statement_matched .)
    While           reduce using rule 19 (statement -> statement_matched .)
    Do              reduce using rule 19 (statement -> statement_matched .)
    For             reduce using rule 19 (statement -> statement_matched .)
    Return          reduce using rule 19 (statement -> statement_matched .)
    LBrace          reduce using rule 19 (statement -> statement_matched .)
    Break           reduce using rule 19 (statement -> statement_matched .)
    Continue        reduce using rule 19 (statement -> statement_matched .)
    Int             reduce using rule 19 (statement -> statement_matched .)
    Identifier      reduce using rule 19 (statement -> statement_matched .)
    Minus           reduce using rule 19 (statement -> statement_matched .)
    BitNot          reduce using rule 19 (statement -> statement_matched .)
    Not             reduce using rule 19 (statement -> statement_matched .)
    Integer         reduce using rule 19 (statement -> statement_matched .)
    LParen          reduce using rule 19 (statement -> statement_matched .)
    Semi            reduce using rule 19 (statement -> statement_matched .)


state 208

    (28) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 213


state 209

    (29) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 162


state 210

    (30) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 214
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 211

    (31) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 215
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 212

    (22) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    If              shift and go to state 177
    While           shift and go to state 178
    Do              shift and go to state 179
    For             shift and go to state 175

    statement_unmatched            shift and go to state 155

state 213

    (28) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (21) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (24) statement_matched -> . While LParen expression RParen statement_matched
    (26) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (28) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (29) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (32) statement_matched -> . Return expression Semi
    (33) statement_matched -> . opt_expression Semi
    (34) statement_matched -> . LBrace block RBrace
    (35) statement_matched -> . Break Semi
    (36) statement_matched -> . Continue Semi
    (37) opt_expression -> . expression
    (38) opt_expression -> . empty
    (41) expression -> . assignment
    (1) empty -> .
    (42) assignment -> . conditional
    (62) assignment -> . Identifier Assign expression
    (43) conditional -> . logical_or
    (79) conditional -> . logical_or Question expression Colon conditional
    (44) logical_or -> . logical_and
    (63) logical_or -> . logical_or Or logical_and
    (45) logical_and -> . bit_or
    (64) logical_and -> . logical_and And bit_or
    (46) bit_or -> . xor
    (65) bit_or -> . bit_or BitOr xor
    (47) xor -> . bit_and
    (66) xor -> . xor Xor bit_and
    (48) bit_and -> . equality
    (67) bit_and -> . bit_and BitAnd equality
    (49) equality -> . relational
    (68) equality -> . equality NotEqual relational
    (69) equality -> . equality Equal relational
    (50) relational -> . additive
    (70) relational -> . relational Less additive
    (71) relational -> . relational Greater additive
    (72) relational -> . relational LessEqual additive
    (73) relational -> . relational GreaterEqual additive
    (51) additive -> . multiplicative
    (74) additive -> . additive Plus multiplicative
    (75) additive -> . additive Minus multiplicative
    (52) multiplicative -> . unary
    (76) multiplicative -> . multiplicative Mul unary
    (77) multiplicative -> . multiplicative Div unary
    (78) multiplicative -> . multiplicative Mod unary
    (53) unary -> . postfix
    (55) unary -> . Minus unary
    (56) unary -> . BitNot unary
    (57) unary -> . Not unary
    (54) postfix -> . primary
    (58) postfix -> . Identifier LParen expression_list RParen
    (80) primary -> . Integer
    (81) primary -> . Identifier
    (82) primary -> . LParen expression RParen

    If              shift and go to state 168
    While           shift and go to state 169
    Do              shift and go to state 170
    For             shift and go to state 166
    Return          shift and go to state 111
    LBrace          shift and go to state 98
    Break           shift and go to state 112
    Continue        shift and go to state 113
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 13
    Minus           shift and go to state 26
    BitNot          shift and go to state 29
    Not             shift and go to state 30
    Integer         shift and go to state 33
    LParen          shift and go to state 32

    opt_expression                 shift and go to state 110
    statement_matched              shift and go to state 163
    expression                     shift and go to state 105
    empty                          shift and go to state 114
    assignment                     shift and go to state 15
    conditional                    shift and go to state 16
    logical_or                     shift and go to state 17
    logical_and                    shift and go to state 18
    bit_or                         shift and go to state 19
    xor                            shift and go to state 20
    bit_and                        shift and go to state 21
    equality                       shift and go to state 22
    relational                     shift and go to state 23
    additive                       shift and go to state 24
    multiplicative                 shift and go to state 25
    unary                          shift and go to state 27
    postfix                        shift and go to state 28
    primary                        shift and go to state 31

state 214

    (30) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 216


state 215

    (31) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 161


state 216

    (30) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (22) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (23) statement_unmatched -> . If LParen expression RParen statement
    (25) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (27) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (30) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    If              shift and go to state 177
    While           shift and go to state 178
    Do              shift and go to state 179
    For             shift and go to state 175

    statement_unmatched            shift and go to state 164
