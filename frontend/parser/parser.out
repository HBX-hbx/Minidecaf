Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     empty -> <empty>
Rule 2     program -> function
Rule 3     type -> Int
Rule 4     function -> type Identifier LParen RParen LBrace block RBrace
Rule 5     block -> block block_item
Rule 6     block -> empty
Rule 7     block_item -> statement
Rule 8     block_item -> declaration Semi
Rule 9     statement -> statement_matched
Rule 10    statement -> statement_unmatched
Rule 11    statement_matched -> If LParen expression RParen statement_matched Else statement_matched
Rule 12    statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched
Rule 13    statement_unmatched -> If LParen expression RParen statement
Rule 14    statement_matched -> While LParen expression RParen statement_matched
Rule 15    statement_unmatched -> While LParen expression RParen statement_unmatched
Rule 16    statement_matched -> Do statement_matched While LParen expression RParen Semi
Rule 17    statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi
Rule 18    statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
Rule 19    statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
Rule 20    statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 21    statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
Rule 22    statement_matched -> Return expression Semi
Rule 23    statement_matched -> opt_expression Semi
Rule 24    statement_matched -> LBrace block RBrace
Rule 25    statement_matched -> Break Semi
Rule 26    statement_matched -> Continue Semi
Rule 27    opt_expression -> expression
Rule 28    opt_expression -> empty
Rule 29    declaration -> type Identifier
Rule 30    declaration -> type Identifier Assign expression
Rule 31    expression -> assignment
Rule 32    assignment -> conditional
Rule 33    conditional -> logical_or
Rule 34    logical_or -> logical_and
Rule 35    logical_and -> bit_or
Rule 36    bit_or -> xor
Rule 37    xor -> bit_and
Rule 38    bit_and -> equality
Rule 39    equality -> relational
Rule 40    relational -> additive
Rule 41    additive -> multiplicative
Rule 42    multiplicative -> unary
Rule 43    unary -> postfix
Rule 44    postfix -> primary
Rule 45    unary -> Minus unary
Rule 46    unary -> BitNot unary
Rule 47    unary -> Not unary
Rule 48    assignment -> Identifier Assign expression
Rule 49    logical_or -> logical_or Or logical_and
Rule 50    logical_and -> logical_and And bit_or
Rule 51    bit_or -> bit_or BitOr xor
Rule 52    xor -> xor Xor bit_and
Rule 53    bit_and -> bit_and BitAnd equality
Rule 54    equality -> equality NotEqual relational
Rule 55    equality -> equality Equal relational
Rule 56    relational -> relational Less additive
Rule 57    relational -> relational Greater additive
Rule 58    relational -> relational LessEqual additive
Rule 59    relational -> relational GreaterEqual additive
Rule 60    additive -> additive Plus multiplicative
Rule 61    additive -> additive Minus multiplicative
Rule 62    multiplicative -> multiplicative Mul unary
Rule 63    multiplicative -> multiplicative Div unary
Rule 64    multiplicative -> multiplicative Mod unary
Rule 65    conditional -> logical_or Question expression Colon conditional
Rule 66    primary -> Integer
Rule 67    primary -> Identifier
Rule 68    primary -> LParen expression RParen

Terminals, with rules where they appear

And                  : 50
Assign               : 30 48
BitAnd               : 53
BitNot               : 46
BitOr                : 51
Break                : 25
Colon                : 65
Continue             : 26
Div                  : 63
Do                   : 16 17
Else                 : 11 12
Equal                : 55
For                  : 18 19 20 21
Greater              : 57
GreaterEqual         : 59
Identifier           : 4 29 30 48 67
If                   : 11 12 13
Int                  : 3
Integer              : 66
LBrace               : 4 24
LParen               : 4 11 12 13 14 15 16 17 18 19 20 21 68
Less                 : 56
LessEqual            : 58
Minus                : 45 61
Mod                  : 64
Mul                  : 62
Not                  : 47
NotEqual             : 54
Or                   : 49
Plus                 : 60
Question             : 65
RBrace               : 4 24
RParen               : 4 11 12 13 14 15 16 17 18 19 20 21 68
Return               : 22
Semi                 : 8 16 17 18 18 19 19 20 20 21 21 21 22 23 25 26
While                : 14 15 16 17
Xor                  : 52
error                : 

Nonterminals, with rules where they appear

additive             : 40 56 57 58 59 60 61
assignment           : 31
bit_and              : 37 52 53
bit_or               : 35 50 51
block                : 4 5 24
block_item           : 5
conditional          : 32 65
declaration          : 8 19 21
empty                : 6 28
equality             : 38 53 54 55
expression           : 11 12 13 14 15 16 17 22 27 30 48 65 68
function             : 2
logical_and          : 34 49 50
logical_or           : 33 49 65
multiplicative       : 41 60 61 62 63 64
opt_expression       : 18 18 18 19 19 20 20 20 21 21 21 23
postfix              : 43
primary              : 44
program              : 0
relational           : 39 54 55 56 57 58 59
statement            : 7 13
statement_matched    : 9 11 11 12 14 16 18 19
statement_unmatched  : 10 12 15 17 20 21
type                 : 4 29 30
unary                : 42 45 46 47 62 63 64
xor                  : 36 51 52

Parsing method: LALR

state 0

    (0) S' -> . program
    (2) program -> . function
    (4) function -> . type Identifier LParen RParen LBrace block RBrace
    (3) type -> . Int

    Int             shift and go to state 4

    program                        shift and go to state 1
    function                       shift and go to state 2
    type                           shift and go to state 3

state 1

    (0) S' -> program .



state 2

    (2) program -> function .

    $end            reduce using rule 2 (program -> function .)


state 3

    (4) function -> type . Identifier LParen RParen LBrace block RBrace

    Identifier      shift and go to state 5


state 4

    (3) type -> Int .

    Identifier      reduce using rule 3 (type -> Int .)


state 5

    (4) function -> type Identifier . LParen RParen LBrace block RBrace

    LParen          shift and go to state 6


state 6

    (4) function -> type Identifier LParen . RParen LBrace block RBrace

    RParen          shift and go to state 7


state 7

    (4) function -> type Identifier LParen RParen . LBrace block RBrace

    LBrace          shift and go to state 8


state 8

    (4) function -> type Identifier LParen RParen LBrace . block RBrace
    (5) block -> . block block_item
    (6) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 9
    empty                          shift and go to state 10

state 9

    (4) function -> type Identifier LParen RParen LBrace block . RBrace
    (5) block -> block . block_item
    (7) block_item -> . statement
    (8) block_item -> . declaration Semi
    (9) statement -> . statement_matched
    (10) statement -> . statement_unmatched
    (29) declaration -> . type Identifier
    (30) declaration -> . type Identifier Assign expression
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (17) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (20) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (3) type -> . Int
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    RBrace          shift and go to state 15
    If              shift and go to state 22
    While           shift and go to state 23
    Do              shift and go to state 24
    For             shift and go to state 25
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Int             shift and go to state 4
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    type                           shift and go to state 11
    block_item                     shift and go to state 16
    statement                      shift and go to state 17
    declaration                    shift and go to state 18
    statement_matched              shift and go to state 19
    statement_unmatched            shift and go to state 20
    expression                     shift and go to state 21
    opt_expression                 shift and go to state 26
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 10

    (6) block -> empty .

    RBrace          reduce using rule 6 (block -> empty .)
    If              reduce using rule 6 (block -> empty .)
    While           reduce using rule 6 (block -> empty .)
    Do              reduce using rule 6 (block -> empty .)
    For             reduce using rule 6 (block -> empty .)
    Return          reduce using rule 6 (block -> empty .)
    LBrace          reduce using rule 6 (block -> empty .)
    Break           reduce using rule 6 (block -> empty .)
    Continue        reduce using rule 6 (block -> empty .)
    Int             reduce using rule 6 (block -> empty .)
    Identifier      reduce using rule 6 (block -> empty .)
    Minus           reduce using rule 6 (block -> empty .)
    BitNot          reduce using rule 6 (block -> empty .)
    Not             reduce using rule 6 (block -> empty .)
    Integer         reduce using rule 6 (block -> empty .)
    LParen          reduce using rule 6 (block -> empty .)
    Semi            reduce using rule 6 (block -> empty .)


state 11

    (29) declaration -> type . Identifier
    (30) declaration -> type . Identifier Assign expression

    Identifier      shift and go to state 49


state 12

    (48) assignment -> Identifier . Assign expression
    (67) primary -> Identifier .

    Assign          shift and go to state 50
    Mul             reduce using rule 67 (primary -> Identifier .)
    Div             reduce using rule 67 (primary -> Identifier .)
    Mod             reduce using rule 67 (primary -> Identifier .)
    Plus            reduce using rule 67 (primary -> Identifier .)
    Minus           reduce using rule 67 (primary -> Identifier .)
    Less            reduce using rule 67 (primary -> Identifier .)
    Greater         reduce using rule 67 (primary -> Identifier .)
    LessEqual       reduce using rule 67 (primary -> Identifier .)
    GreaterEqual    reduce using rule 67 (primary -> Identifier .)
    NotEqual        reduce using rule 67 (primary -> Identifier .)
    Equal           reduce using rule 67 (primary -> Identifier .)
    BitAnd          reduce using rule 67 (primary -> Identifier .)
    Xor             reduce using rule 67 (primary -> Identifier .)
    BitOr           reduce using rule 67 (primary -> Identifier .)
    And             reduce using rule 67 (primary -> Identifier .)
    Question        reduce using rule 67 (primary -> Identifier .)
    Or              reduce using rule 67 (primary -> Identifier .)
    Semi            reduce using rule 67 (primary -> Identifier .)
    RParen          reduce using rule 67 (primary -> Identifier .)
    Colon           reduce using rule 67 (primary -> Identifier .)


state 13

    (68) primary -> LParen . expression RParen
    (31) expression -> . assignment
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 51
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 14

    (24) statement_matched -> LBrace . block RBrace
    (5) block -> . block block_item
    (6) block -> . empty
    (1) empty -> .

    RBrace          reduce using rule 1 (empty -> .)
    If              reduce using rule 1 (empty -> .)
    While           reduce using rule 1 (empty -> .)
    Do              reduce using rule 1 (empty -> .)
    For             reduce using rule 1 (empty -> .)
    Return          reduce using rule 1 (empty -> .)
    LBrace          reduce using rule 1 (empty -> .)
    Break           reduce using rule 1 (empty -> .)
    Continue        reduce using rule 1 (empty -> .)
    Int             reduce using rule 1 (empty -> .)
    Identifier      reduce using rule 1 (empty -> .)
    Minus           reduce using rule 1 (empty -> .)
    BitNot          reduce using rule 1 (empty -> .)
    Not             reduce using rule 1 (empty -> .)
    Integer         reduce using rule 1 (empty -> .)
    LParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)

    block                          shift and go to state 52
    empty                          shift and go to state 10

state 15

    (4) function -> type Identifier LParen RParen LBrace block RBrace .

    $end            reduce using rule 4 (function -> type Identifier LParen RParen LBrace block RBrace .)


state 16

    (5) block -> block block_item .

    RBrace          reduce using rule 5 (block -> block block_item .)
    If              reduce using rule 5 (block -> block block_item .)
    While           reduce using rule 5 (block -> block block_item .)
    Do              reduce using rule 5 (block -> block block_item .)
    For             reduce using rule 5 (block -> block block_item .)
    Return          reduce using rule 5 (block -> block block_item .)
    LBrace          reduce using rule 5 (block -> block block_item .)
    Break           reduce using rule 5 (block -> block block_item .)
    Continue        reduce using rule 5 (block -> block block_item .)
    Int             reduce using rule 5 (block -> block block_item .)
    Identifier      reduce using rule 5 (block -> block block_item .)
    Minus           reduce using rule 5 (block -> block block_item .)
    BitNot          reduce using rule 5 (block -> block block_item .)
    Not             reduce using rule 5 (block -> block block_item .)
    Integer         reduce using rule 5 (block -> block block_item .)
    LParen          reduce using rule 5 (block -> block block_item .)
    Semi            reduce using rule 5 (block -> block block_item .)


state 17

    (7) block_item -> statement .

    RBrace          reduce using rule 7 (block_item -> statement .)
    If              reduce using rule 7 (block_item -> statement .)
    While           reduce using rule 7 (block_item -> statement .)
    Do              reduce using rule 7 (block_item -> statement .)
    For             reduce using rule 7 (block_item -> statement .)
    Return          reduce using rule 7 (block_item -> statement .)
    LBrace          reduce using rule 7 (block_item -> statement .)
    Break           reduce using rule 7 (block_item -> statement .)
    Continue        reduce using rule 7 (block_item -> statement .)
    Int             reduce using rule 7 (block_item -> statement .)
    Identifier      reduce using rule 7 (block_item -> statement .)
    Minus           reduce using rule 7 (block_item -> statement .)
    BitNot          reduce using rule 7 (block_item -> statement .)
    Not             reduce using rule 7 (block_item -> statement .)
    Integer         reduce using rule 7 (block_item -> statement .)
    LParen          reduce using rule 7 (block_item -> statement .)
    Semi            reduce using rule 7 (block_item -> statement .)


state 18

    (8) block_item -> declaration . Semi

    Semi            shift and go to state 53


state 19

    (9) statement -> statement_matched .

    RBrace          reduce using rule 9 (statement -> statement_matched .)
    If              reduce using rule 9 (statement -> statement_matched .)
    While           reduce using rule 9 (statement -> statement_matched .)
    Do              reduce using rule 9 (statement -> statement_matched .)
    For             reduce using rule 9 (statement -> statement_matched .)
    Return          reduce using rule 9 (statement -> statement_matched .)
    LBrace          reduce using rule 9 (statement -> statement_matched .)
    Break           reduce using rule 9 (statement -> statement_matched .)
    Continue        reduce using rule 9 (statement -> statement_matched .)
    Int             reduce using rule 9 (statement -> statement_matched .)
    Identifier      reduce using rule 9 (statement -> statement_matched .)
    Minus           reduce using rule 9 (statement -> statement_matched .)
    BitNot          reduce using rule 9 (statement -> statement_matched .)
    Not             reduce using rule 9 (statement -> statement_matched .)
    Integer         reduce using rule 9 (statement -> statement_matched .)
    LParen          reduce using rule 9 (statement -> statement_matched .)
    Semi            reduce using rule 9 (statement -> statement_matched .)


state 20

    (10) statement -> statement_unmatched .

    RBrace          reduce using rule 10 (statement -> statement_unmatched .)
    If              reduce using rule 10 (statement -> statement_unmatched .)
    While           reduce using rule 10 (statement -> statement_unmatched .)
    Do              reduce using rule 10 (statement -> statement_unmatched .)
    For             reduce using rule 10 (statement -> statement_unmatched .)
    Return          reduce using rule 10 (statement -> statement_unmatched .)
    LBrace          reduce using rule 10 (statement -> statement_unmatched .)
    Break           reduce using rule 10 (statement -> statement_unmatched .)
    Continue        reduce using rule 10 (statement -> statement_unmatched .)
    Int             reduce using rule 10 (statement -> statement_unmatched .)
    Identifier      reduce using rule 10 (statement -> statement_unmatched .)
    Minus           reduce using rule 10 (statement -> statement_unmatched .)
    BitNot          reduce using rule 10 (statement -> statement_unmatched .)
    Not             reduce using rule 10 (statement -> statement_unmatched .)
    Integer         reduce using rule 10 (statement -> statement_unmatched .)
    LParen          reduce using rule 10 (statement -> statement_unmatched .)
    Semi            reduce using rule 10 (statement -> statement_unmatched .)


state 21

    (27) opt_expression -> expression .

    Semi            reduce using rule 27 (opt_expression -> expression .)
    RParen          reduce using rule 27 (opt_expression -> expression .)


state 22

    (11) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched
    (12) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 54


state 23

    (14) statement_matched -> While . LParen expression RParen statement_matched
    (15) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 55


state 24

    (16) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (17) statement_unmatched -> Do . statement_unmatched While LParen expression RParen Semi
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (17) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (20) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    If              shift and go to state 22
    While           shift and go to state 23
    Do              shift and go to state 24
    For             shift and go to state 25
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    statement_matched              shift and go to state 56
    expression                     shift and go to state 21
    statement_unmatched            shift and go to state 57
    opt_expression                 shift and go to state 26
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 25

    (18) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (20) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    LParen          shift and go to state 58


state 26

    (23) statement_matched -> opt_expression . Semi

    Semi            shift and go to state 59


state 27

    (22) statement_matched -> Return . expression Semi
    (31) expression -> . assignment
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 60
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 28

    (25) statement_matched -> Break . Semi

    Semi            shift and go to state 61


state 29

    (26) statement_matched -> Continue . Semi

    Semi            shift and go to state 62


state 30

    (28) opt_expression -> empty .

    Semi            reduce using rule 28 (opt_expression -> empty .)
    RParen          reduce using rule 28 (opt_expression -> empty .)


state 31

    (31) expression -> assignment .

    Semi            reduce using rule 31 (expression -> assignment .)
    RParen          reduce using rule 31 (expression -> assignment .)
    Colon           reduce using rule 31 (expression -> assignment .)


state 32

    (32) assignment -> conditional .

    Semi            reduce using rule 32 (assignment -> conditional .)
    RParen          reduce using rule 32 (assignment -> conditional .)
    Colon           reduce using rule 32 (assignment -> conditional .)


state 33

    (33) conditional -> logical_or .
    (65) conditional -> logical_or . Question expression Colon conditional
    (49) logical_or -> logical_or . Or logical_and

    Semi            reduce using rule 33 (conditional -> logical_or .)
    RParen          reduce using rule 33 (conditional -> logical_or .)
    Colon           reduce using rule 33 (conditional -> logical_or .)
    Question        shift and go to state 63
    Or              shift and go to state 64


state 34

    (34) logical_or -> logical_and .
    (50) logical_and -> logical_and . And bit_or

    Question        reduce using rule 34 (logical_or -> logical_and .)
    Or              reduce using rule 34 (logical_or -> logical_and .)
    Semi            reduce using rule 34 (logical_or -> logical_and .)
    RParen          reduce using rule 34 (logical_or -> logical_and .)
    Colon           reduce using rule 34 (logical_or -> logical_and .)
    And             shift and go to state 65


state 35

    (35) logical_and -> bit_or .
    (51) bit_or -> bit_or . BitOr xor

    And             reduce using rule 35 (logical_and -> bit_or .)
    Question        reduce using rule 35 (logical_and -> bit_or .)
    Or              reduce using rule 35 (logical_and -> bit_or .)
    Semi            reduce using rule 35 (logical_and -> bit_or .)
    RParen          reduce using rule 35 (logical_and -> bit_or .)
    Colon           reduce using rule 35 (logical_and -> bit_or .)
    BitOr           shift and go to state 66


state 36

    (36) bit_or -> xor .
    (52) xor -> xor . Xor bit_and

    BitOr           reduce using rule 36 (bit_or -> xor .)
    And             reduce using rule 36 (bit_or -> xor .)
    Question        reduce using rule 36 (bit_or -> xor .)
    Or              reduce using rule 36 (bit_or -> xor .)
    Semi            reduce using rule 36 (bit_or -> xor .)
    RParen          reduce using rule 36 (bit_or -> xor .)
    Colon           reduce using rule 36 (bit_or -> xor .)
    Xor             shift and go to state 67


state 37

    (37) xor -> bit_and .
    (53) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 37 (xor -> bit_and .)
    BitOr           reduce using rule 37 (xor -> bit_and .)
    And             reduce using rule 37 (xor -> bit_and .)
    Question        reduce using rule 37 (xor -> bit_and .)
    Or              reduce using rule 37 (xor -> bit_and .)
    Semi            reduce using rule 37 (xor -> bit_and .)
    RParen          reduce using rule 37 (xor -> bit_and .)
    Colon           reduce using rule 37 (xor -> bit_and .)
    BitAnd          shift and go to state 68


state 38

    (38) bit_and -> equality .
    (54) equality -> equality . NotEqual relational
    (55) equality -> equality . Equal relational

    BitAnd          reduce using rule 38 (bit_and -> equality .)
    Xor             reduce using rule 38 (bit_and -> equality .)
    BitOr           reduce using rule 38 (bit_and -> equality .)
    And             reduce using rule 38 (bit_and -> equality .)
    Question        reduce using rule 38 (bit_and -> equality .)
    Or              reduce using rule 38 (bit_and -> equality .)
    Semi            reduce using rule 38 (bit_and -> equality .)
    RParen          reduce using rule 38 (bit_and -> equality .)
    Colon           reduce using rule 38 (bit_and -> equality .)
    NotEqual        shift and go to state 69
    Equal           shift and go to state 70


state 39

    (39) equality -> relational .
    (56) relational -> relational . Less additive
    (57) relational -> relational . Greater additive
    (58) relational -> relational . LessEqual additive
    (59) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 39 (equality -> relational .)
    Equal           reduce using rule 39 (equality -> relational .)
    BitAnd          reduce using rule 39 (equality -> relational .)
    Xor             reduce using rule 39 (equality -> relational .)
    BitOr           reduce using rule 39 (equality -> relational .)
    And             reduce using rule 39 (equality -> relational .)
    Question        reduce using rule 39 (equality -> relational .)
    Or              reduce using rule 39 (equality -> relational .)
    Semi            reduce using rule 39 (equality -> relational .)
    RParen          reduce using rule 39 (equality -> relational .)
    Colon           reduce using rule 39 (equality -> relational .)
    Less            shift and go to state 71
    Greater         shift and go to state 72
    LessEqual       shift and go to state 73
    GreaterEqual    shift and go to state 74


state 40

    (40) relational -> additive .
    (60) additive -> additive . Plus multiplicative
    (61) additive -> additive . Minus multiplicative

    Less            reduce using rule 40 (relational -> additive .)
    Greater         reduce using rule 40 (relational -> additive .)
    LessEqual       reduce using rule 40 (relational -> additive .)
    GreaterEqual    reduce using rule 40 (relational -> additive .)
    NotEqual        reduce using rule 40 (relational -> additive .)
    Equal           reduce using rule 40 (relational -> additive .)
    BitAnd          reduce using rule 40 (relational -> additive .)
    Xor             reduce using rule 40 (relational -> additive .)
    BitOr           reduce using rule 40 (relational -> additive .)
    And             reduce using rule 40 (relational -> additive .)
    Question        reduce using rule 40 (relational -> additive .)
    Or              reduce using rule 40 (relational -> additive .)
    Semi            reduce using rule 40 (relational -> additive .)
    RParen          reduce using rule 40 (relational -> additive .)
    Colon           reduce using rule 40 (relational -> additive .)
    Plus            shift and go to state 75
    Minus           shift and go to state 76


state 41

    (41) additive -> multiplicative .
    (62) multiplicative -> multiplicative . Mul unary
    (63) multiplicative -> multiplicative . Div unary
    (64) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 41 (additive -> multiplicative .)
    Minus           reduce using rule 41 (additive -> multiplicative .)
    Less            reduce using rule 41 (additive -> multiplicative .)
    Greater         reduce using rule 41 (additive -> multiplicative .)
    LessEqual       reduce using rule 41 (additive -> multiplicative .)
    GreaterEqual    reduce using rule 41 (additive -> multiplicative .)
    NotEqual        reduce using rule 41 (additive -> multiplicative .)
    Equal           reduce using rule 41 (additive -> multiplicative .)
    BitAnd          reduce using rule 41 (additive -> multiplicative .)
    Xor             reduce using rule 41 (additive -> multiplicative .)
    BitOr           reduce using rule 41 (additive -> multiplicative .)
    And             reduce using rule 41 (additive -> multiplicative .)
    Question        reduce using rule 41 (additive -> multiplicative .)
    Or              reduce using rule 41 (additive -> multiplicative .)
    Semi            reduce using rule 41 (additive -> multiplicative .)
    RParen          reduce using rule 41 (additive -> multiplicative .)
    Colon           reduce using rule 41 (additive -> multiplicative .)
    Mul             shift and go to state 77
    Div             shift and go to state 78
    Mod             shift and go to state 79


state 42

    (45) unary -> Minus . unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    unary                          shift and go to state 80
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 43

    (42) multiplicative -> unary .

    Mul             reduce using rule 42 (multiplicative -> unary .)
    Div             reduce using rule 42 (multiplicative -> unary .)
    Mod             reduce using rule 42 (multiplicative -> unary .)
    Plus            reduce using rule 42 (multiplicative -> unary .)
    Minus           reduce using rule 42 (multiplicative -> unary .)
    Less            reduce using rule 42 (multiplicative -> unary .)
    Greater         reduce using rule 42 (multiplicative -> unary .)
    LessEqual       reduce using rule 42 (multiplicative -> unary .)
    GreaterEqual    reduce using rule 42 (multiplicative -> unary .)
    NotEqual        reduce using rule 42 (multiplicative -> unary .)
    Equal           reduce using rule 42 (multiplicative -> unary .)
    BitAnd          reduce using rule 42 (multiplicative -> unary .)
    Xor             reduce using rule 42 (multiplicative -> unary .)
    BitOr           reduce using rule 42 (multiplicative -> unary .)
    And             reduce using rule 42 (multiplicative -> unary .)
    Question        reduce using rule 42 (multiplicative -> unary .)
    Or              reduce using rule 42 (multiplicative -> unary .)
    Semi            reduce using rule 42 (multiplicative -> unary .)
    RParen          reduce using rule 42 (multiplicative -> unary .)
    Colon           reduce using rule 42 (multiplicative -> unary .)


state 44

    (43) unary -> postfix .

    Mul             reduce using rule 43 (unary -> postfix .)
    Div             reduce using rule 43 (unary -> postfix .)
    Mod             reduce using rule 43 (unary -> postfix .)
    Plus            reduce using rule 43 (unary -> postfix .)
    Minus           reduce using rule 43 (unary -> postfix .)
    Less            reduce using rule 43 (unary -> postfix .)
    Greater         reduce using rule 43 (unary -> postfix .)
    LessEqual       reduce using rule 43 (unary -> postfix .)
    GreaterEqual    reduce using rule 43 (unary -> postfix .)
    NotEqual        reduce using rule 43 (unary -> postfix .)
    Equal           reduce using rule 43 (unary -> postfix .)
    BitAnd          reduce using rule 43 (unary -> postfix .)
    Xor             reduce using rule 43 (unary -> postfix .)
    BitOr           reduce using rule 43 (unary -> postfix .)
    And             reduce using rule 43 (unary -> postfix .)
    Question        reduce using rule 43 (unary -> postfix .)
    Or              reduce using rule 43 (unary -> postfix .)
    Semi            reduce using rule 43 (unary -> postfix .)
    RParen          reduce using rule 43 (unary -> postfix .)
    Colon           reduce using rule 43 (unary -> postfix .)


state 45

    (46) unary -> BitNot . unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    unary                          shift and go to state 82
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 46

    (47) unary -> Not . unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    unary                          shift and go to state 83
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 47

    (44) postfix -> primary .

    Mul             reduce using rule 44 (postfix -> primary .)
    Div             reduce using rule 44 (postfix -> primary .)
    Mod             reduce using rule 44 (postfix -> primary .)
    Plus            reduce using rule 44 (postfix -> primary .)
    Minus           reduce using rule 44 (postfix -> primary .)
    Less            reduce using rule 44 (postfix -> primary .)
    Greater         reduce using rule 44 (postfix -> primary .)
    LessEqual       reduce using rule 44 (postfix -> primary .)
    GreaterEqual    reduce using rule 44 (postfix -> primary .)
    NotEqual        reduce using rule 44 (postfix -> primary .)
    Equal           reduce using rule 44 (postfix -> primary .)
    BitAnd          reduce using rule 44 (postfix -> primary .)
    Xor             reduce using rule 44 (postfix -> primary .)
    BitOr           reduce using rule 44 (postfix -> primary .)
    And             reduce using rule 44 (postfix -> primary .)
    Question        reduce using rule 44 (postfix -> primary .)
    Or              reduce using rule 44 (postfix -> primary .)
    Semi            reduce using rule 44 (postfix -> primary .)
    RParen          reduce using rule 44 (postfix -> primary .)
    Colon           reduce using rule 44 (postfix -> primary .)


state 48

    (66) primary -> Integer .

    Mul             reduce using rule 66 (primary -> Integer .)
    Div             reduce using rule 66 (primary -> Integer .)
    Mod             reduce using rule 66 (primary -> Integer .)
    Plus            reduce using rule 66 (primary -> Integer .)
    Minus           reduce using rule 66 (primary -> Integer .)
    Less            reduce using rule 66 (primary -> Integer .)
    Greater         reduce using rule 66 (primary -> Integer .)
    LessEqual       reduce using rule 66 (primary -> Integer .)
    GreaterEqual    reduce using rule 66 (primary -> Integer .)
    NotEqual        reduce using rule 66 (primary -> Integer .)
    Equal           reduce using rule 66 (primary -> Integer .)
    BitAnd          reduce using rule 66 (primary -> Integer .)
    Xor             reduce using rule 66 (primary -> Integer .)
    BitOr           reduce using rule 66 (primary -> Integer .)
    And             reduce using rule 66 (primary -> Integer .)
    Question        reduce using rule 66 (primary -> Integer .)
    Or              reduce using rule 66 (primary -> Integer .)
    Semi            reduce using rule 66 (primary -> Integer .)
    RParen          reduce using rule 66 (primary -> Integer .)
    Colon           reduce using rule 66 (primary -> Integer .)


state 49

    (29) declaration -> type Identifier .
    (30) declaration -> type Identifier . Assign expression

    Semi            reduce using rule 29 (declaration -> type Identifier .)
    Assign          shift and go to state 84


state 50

    (48) assignment -> Identifier Assign . expression
    (31) expression -> . assignment
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 85
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 51

    (68) primary -> LParen expression . RParen

    RParen          shift and go to state 86


state 52

    (24) statement_matched -> LBrace block . RBrace
    (5) block -> block . block_item
    (7) block_item -> . statement
    (8) block_item -> . declaration Semi
    (9) statement -> . statement_matched
    (10) statement -> . statement_unmatched
    (29) declaration -> . type Identifier
    (30) declaration -> . type Identifier Assign expression
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (17) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (20) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (3) type -> . Int
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    RBrace          shift and go to state 87
    If              shift and go to state 22
    While           shift and go to state 23
    Do              shift and go to state 24
    For             shift and go to state 25
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Int             shift and go to state 4
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    block_item                     shift and go to state 16
    statement                      shift and go to state 17
    declaration                    shift and go to state 18
    statement_matched              shift and go to state 19
    statement_unmatched            shift and go to state 20
    type                           shift and go to state 11
    expression                     shift and go to state 21
    opt_expression                 shift and go to state 26
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 53

    (8) block_item -> declaration Semi .

    RBrace          reduce using rule 8 (block_item -> declaration Semi .)
    If              reduce using rule 8 (block_item -> declaration Semi .)
    While           reduce using rule 8 (block_item -> declaration Semi .)
    Do              reduce using rule 8 (block_item -> declaration Semi .)
    For             reduce using rule 8 (block_item -> declaration Semi .)
    Return          reduce using rule 8 (block_item -> declaration Semi .)
    LBrace          reduce using rule 8 (block_item -> declaration Semi .)
    Break           reduce using rule 8 (block_item -> declaration Semi .)
    Continue        reduce using rule 8 (block_item -> declaration Semi .)
    Int             reduce using rule 8 (block_item -> declaration Semi .)
    Identifier      reduce using rule 8 (block_item -> declaration Semi .)
    Minus           reduce using rule 8 (block_item -> declaration Semi .)
    BitNot          reduce using rule 8 (block_item -> declaration Semi .)
    Not             reduce using rule 8 (block_item -> declaration Semi .)
    Integer         reduce using rule 8 (block_item -> declaration Semi .)
    LParen          reduce using rule 8 (block_item -> declaration Semi .)
    Semi            reduce using rule 8 (block_item -> declaration Semi .)


state 54

    (11) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (12) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> If LParen . expression RParen statement
    (31) expression -> . assignment
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 88
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 55

    (14) statement_matched -> While LParen . expression RParen statement_matched
    (15) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (31) expression -> . assignment
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 89
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 56

    (16) statement_matched -> Do statement_matched . While LParen expression RParen Semi

    While           shift and go to state 90


state 57

    (17) statement_unmatched -> Do statement_unmatched . While LParen expression RParen Semi

    While           shift and go to state 91


state 58

    (18) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (20) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (29) declaration -> . type Identifier
    (30) declaration -> . type Identifier Assign expression
    (31) expression -> . assignment
    (1) empty -> .
    (3) type -> . Int
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 4
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 92
    declaration                    shift and go to state 93
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    type                           shift and go to state 11
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 59

    (23) statement_matched -> opt_expression Semi .

    RBrace          reduce using rule 23 (statement_matched -> opt_expression Semi .)
    If              reduce using rule 23 (statement_matched -> opt_expression Semi .)
    While           reduce using rule 23 (statement_matched -> opt_expression Semi .)
    Do              reduce using rule 23 (statement_matched -> opt_expression Semi .)
    For             reduce using rule 23 (statement_matched -> opt_expression Semi .)
    Return          reduce using rule 23 (statement_matched -> opt_expression Semi .)
    LBrace          reduce using rule 23 (statement_matched -> opt_expression Semi .)
    Break           reduce using rule 23 (statement_matched -> opt_expression Semi .)
    Continue        reduce using rule 23 (statement_matched -> opt_expression Semi .)
    Int             reduce using rule 23 (statement_matched -> opt_expression Semi .)
    Identifier      reduce using rule 23 (statement_matched -> opt_expression Semi .)
    Minus           reduce using rule 23 (statement_matched -> opt_expression Semi .)
    BitNot          reduce using rule 23 (statement_matched -> opt_expression Semi .)
    Not             reduce using rule 23 (statement_matched -> opt_expression Semi .)
    Integer         reduce using rule 23 (statement_matched -> opt_expression Semi .)
    LParen          reduce using rule 23 (statement_matched -> opt_expression Semi .)
    Semi            reduce using rule 23 (statement_matched -> opt_expression Semi .)
    Else            reduce using rule 23 (statement_matched -> opt_expression Semi .)


state 60

    (22) statement_matched -> Return expression . Semi

    Semi            shift and go to state 94


state 61

    (25) statement_matched -> Break Semi .

    RBrace          reduce using rule 25 (statement_matched -> Break Semi .)
    If              reduce using rule 25 (statement_matched -> Break Semi .)
    While           reduce using rule 25 (statement_matched -> Break Semi .)
    Do              reduce using rule 25 (statement_matched -> Break Semi .)
    For             reduce using rule 25 (statement_matched -> Break Semi .)
    Return          reduce using rule 25 (statement_matched -> Break Semi .)
    LBrace          reduce using rule 25 (statement_matched -> Break Semi .)
    Break           reduce using rule 25 (statement_matched -> Break Semi .)
    Continue        reduce using rule 25 (statement_matched -> Break Semi .)
    Int             reduce using rule 25 (statement_matched -> Break Semi .)
    Identifier      reduce using rule 25 (statement_matched -> Break Semi .)
    Minus           reduce using rule 25 (statement_matched -> Break Semi .)
    BitNot          reduce using rule 25 (statement_matched -> Break Semi .)
    Not             reduce using rule 25 (statement_matched -> Break Semi .)
    Integer         reduce using rule 25 (statement_matched -> Break Semi .)
    LParen          reduce using rule 25 (statement_matched -> Break Semi .)
    Semi            reduce using rule 25 (statement_matched -> Break Semi .)
    Else            reduce using rule 25 (statement_matched -> Break Semi .)


state 62

    (26) statement_matched -> Continue Semi .

    RBrace          reduce using rule 26 (statement_matched -> Continue Semi .)
    If              reduce using rule 26 (statement_matched -> Continue Semi .)
    While           reduce using rule 26 (statement_matched -> Continue Semi .)
    Do              reduce using rule 26 (statement_matched -> Continue Semi .)
    For             reduce using rule 26 (statement_matched -> Continue Semi .)
    Return          reduce using rule 26 (statement_matched -> Continue Semi .)
    LBrace          reduce using rule 26 (statement_matched -> Continue Semi .)
    Break           reduce using rule 26 (statement_matched -> Continue Semi .)
    Continue        reduce using rule 26 (statement_matched -> Continue Semi .)
    Int             reduce using rule 26 (statement_matched -> Continue Semi .)
    Identifier      reduce using rule 26 (statement_matched -> Continue Semi .)
    Minus           reduce using rule 26 (statement_matched -> Continue Semi .)
    BitNot          reduce using rule 26 (statement_matched -> Continue Semi .)
    Not             reduce using rule 26 (statement_matched -> Continue Semi .)
    Integer         reduce using rule 26 (statement_matched -> Continue Semi .)
    LParen          reduce using rule 26 (statement_matched -> Continue Semi .)
    Semi            reduce using rule 26 (statement_matched -> Continue Semi .)
    Else            reduce using rule 26 (statement_matched -> Continue Semi .)


state 63

    (65) conditional -> logical_or Question . expression Colon conditional
    (31) expression -> . assignment
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    logical_or                     shift and go to state 33
    expression                     shift and go to state 95
    conditional                    shift and go to state 32
    assignment                     shift and go to state 31
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 64

    (49) logical_or -> logical_or Or . logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    logical_and                    shift and go to state 96
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 65

    (50) logical_and -> logical_and And . bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    bit_or                         shift and go to state 97
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 66

    (51) bit_or -> bit_or BitOr . xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    xor                            shift and go to state 98
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 67

    (52) xor -> xor Xor . bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    bit_and                        shift and go to state 99
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 68

    (53) bit_and -> bit_and BitAnd . equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    equality                       shift and go to state 100
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 69

    (54) equality -> equality NotEqual . relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    relational                     shift and go to state 101
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 70

    (55) equality -> equality Equal . relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    relational                     shift and go to state 102
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 71

    (56) relational -> relational Less . additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    additive                       shift and go to state 103
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 72

    (57) relational -> relational Greater . additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    additive                       shift and go to state 104
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 73

    (58) relational -> relational LessEqual . additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    additive                       shift and go to state 105
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 74

    (59) relational -> relational GreaterEqual . additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    additive                       shift and go to state 106
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 75

    (60) additive -> additive Plus . multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    multiplicative                 shift and go to state 107
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 76

    (61) additive -> additive Minus . multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    multiplicative                 shift and go to state 108
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 77

    (62) multiplicative -> multiplicative Mul . unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    unary                          shift and go to state 109
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 78

    (63) multiplicative -> multiplicative Div . unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    unary                          shift and go to state 110
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 79

    (64) multiplicative -> multiplicative Mod . unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    unary                          shift and go to state 111
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 80

    (45) unary -> Minus unary .

    Mul             reduce using rule 45 (unary -> Minus unary .)
    Div             reduce using rule 45 (unary -> Minus unary .)
    Mod             reduce using rule 45 (unary -> Minus unary .)
    Plus            reduce using rule 45 (unary -> Minus unary .)
    Minus           reduce using rule 45 (unary -> Minus unary .)
    Less            reduce using rule 45 (unary -> Minus unary .)
    Greater         reduce using rule 45 (unary -> Minus unary .)
    LessEqual       reduce using rule 45 (unary -> Minus unary .)
    GreaterEqual    reduce using rule 45 (unary -> Minus unary .)
    NotEqual        reduce using rule 45 (unary -> Minus unary .)
    Equal           reduce using rule 45 (unary -> Minus unary .)
    BitAnd          reduce using rule 45 (unary -> Minus unary .)
    Xor             reduce using rule 45 (unary -> Minus unary .)
    BitOr           reduce using rule 45 (unary -> Minus unary .)
    And             reduce using rule 45 (unary -> Minus unary .)
    Question        reduce using rule 45 (unary -> Minus unary .)
    Or              reduce using rule 45 (unary -> Minus unary .)
    Semi            reduce using rule 45 (unary -> Minus unary .)
    RParen          reduce using rule 45 (unary -> Minus unary .)
    Colon           reduce using rule 45 (unary -> Minus unary .)


state 81

    (67) primary -> Identifier .

    Mul             reduce using rule 67 (primary -> Identifier .)
    Div             reduce using rule 67 (primary -> Identifier .)
    Mod             reduce using rule 67 (primary -> Identifier .)
    Plus            reduce using rule 67 (primary -> Identifier .)
    Minus           reduce using rule 67 (primary -> Identifier .)
    Less            reduce using rule 67 (primary -> Identifier .)
    Greater         reduce using rule 67 (primary -> Identifier .)
    LessEqual       reduce using rule 67 (primary -> Identifier .)
    GreaterEqual    reduce using rule 67 (primary -> Identifier .)
    NotEqual        reduce using rule 67 (primary -> Identifier .)
    Equal           reduce using rule 67 (primary -> Identifier .)
    BitAnd          reduce using rule 67 (primary -> Identifier .)
    Xor             reduce using rule 67 (primary -> Identifier .)
    BitOr           reduce using rule 67 (primary -> Identifier .)
    And             reduce using rule 67 (primary -> Identifier .)
    Question        reduce using rule 67 (primary -> Identifier .)
    Or              reduce using rule 67 (primary -> Identifier .)
    Semi            reduce using rule 67 (primary -> Identifier .)
    RParen          reduce using rule 67 (primary -> Identifier .)
    Colon           reduce using rule 67 (primary -> Identifier .)


state 82

    (46) unary -> BitNot unary .

    Mul             reduce using rule 46 (unary -> BitNot unary .)
    Div             reduce using rule 46 (unary -> BitNot unary .)
    Mod             reduce using rule 46 (unary -> BitNot unary .)
    Plus            reduce using rule 46 (unary -> BitNot unary .)
    Minus           reduce using rule 46 (unary -> BitNot unary .)
    Less            reduce using rule 46 (unary -> BitNot unary .)
    Greater         reduce using rule 46 (unary -> BitNot unary .)
    LessEqual       reduce using rule 46 (unary -> BitNot unary .)
    GreaterEqual    reduce using rule 46 (unary -> BitNot unary .)
    NotEqual        reduce using rule 46 (unary -> BitNot unary .)
    Equal           reduce using rule 46 (unary -> BitNot unary .)
    BitAnd          reduce using rule 46 (unary -> BitNot unary .)
    Xor             reduce using rule 46 (unary -> BitNot unary .)
    BitOr           reduce using rule 46 (unary -> BitNot unary .)
    And             reduce using rule 46 (unary -> BitNot unary .)
    Question        reduce using rule 46 (unary -> BitNot unary .)
    Or              reduce using rule 46 (unary -> BitNot unary .)
    Semi            reduce using rule 46 (unary -> BitNot unary .)
    RParen          reduce using rule 46 (unary -> BitNot unary .)
    Colon           reduce using rule 46 (unary -> BitNot unary .)


state 83

    (47) unary -> Not unary .

    Mul             reduce using rule 47 (unary -> Not unary .)
    Div             reduce using rule 47 (unary -> Not unary .)
    Mod             reduce using rule 47 (unary -> Not unary .)
    Plus            reduce using rule 47 (unary -> Not unary .)
    Minus           reduce using rule 47 (unary -> Not unary .)
    Less            reduce using rule 47 (unary -> Not unary .)
    Greater         reduce using rule 47 (unary -> Not unary .)
    LessEqual       reduce using rule 47 (unary -> Not unary .)
    GreaterEqual    reduce using rule 47 (unary -> Not unary .)
    NotEqual        reduce using rule 47 (unary -> Not unary .)
    Equal           reduce using rule 47 (unary -> Not unary .)
    BitAnd          reduce using rule 47 (unary -> Not unary .)
    Xor             reduce using rule 47 (unary -> Not unary .)
    BitOr           reduce using rule 47 (unary -> Not unary .)
    And             reduce using rule 47 (unary -> Not unary .)
    Question        reduce using rule 47 (unary -> Not unary .)
    Or              reduce using rule 47 (unary -> Not unary .)
    Semi            reduce using rule 47 (unary -> Not unary .)
    RParen          reduce using rule 47 (unary -> Not unary .)
    Colon           reduce using rule 47 (unary -> Not unary .)


state 84

    (30) declaration -> type Identifier Assign . expression
    (31) expression -> . assignment
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 112
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 85

    (48) assignment -> Identifier Assign expression .

    Semi            reduce using rule 48 (assignment -> Identifier Assign expression .)
    RParen          reduce using rule 48 (assignment -> Identifier Assign expression .)
    Colon           reduce using rule 48 (assignment -> Identifier Assign expression .)


state 86

    (68) primary -> LParen expression RParen .

    Mul             reduce using rule 68 (primary -> LParen expression RParen .)
    Div             reduce using rule 68 (primary -> LParen expression RParen .)
    Mod             reduce using rule 68 (primary -> LParen expression RParen .)
    Plus            reduce using rule 68 (primary -> LParen expression RParen .)
    Minus           reduce using rule 68 (primary -> LParen expression RParen .)
    Less            reduce using rule 68 (primary -> LParen expression RParen .)
    Greater         reduce using rule 68 (primary -> LParen expression RParen .)
    LessEqual       reduce using rule 68 (primary -> LParen expression RParen .)
    GreaterEqual    reduce using rule 68 (primary -> LParen expression RParen .)
    NotEqual        reduce using rule 68 (primary -> LParen expression RParen .)
    Equal           reduce using rule 68 (primary -> LParen expression RParen .)
    BitAnd          reduce using rule 68 (primary -> LParen expression RParen .)
    Xor             reduce using rule 68 (primary -> LParen expression RParen .)
    BitOr           reduce using rule 68 (primary -> LParen expression RParen .)
    And             reduce using rule 68 (primary -> LParen expression RParen .)
    Question        reduce using rule 68 (primary -> LParen expression RParen .)
    Or              reduce using rule 68 (primary -> LParen expression RParen .)
    Semi            reduce using rule 68 (primary -> LParen expression RParen .)
    RParen          reduce using rule 68 (primary -> LParen expression RParen .)
    Colon           reduce using rule 68 (primary -> LParen expression RParen .)


state 87

    (24) statement_matched -> LBrace block RBrace .

    RBrace          reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    If              reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    While           reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    Do              reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    For             reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    Return          reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    LBrace          reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    Break           reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    Continue        reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    Int             reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    Identifier      reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    Minus           reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    BitNot          reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    Not             reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    Integer         reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    LParen          reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    Semi            reduce using rule 24 (statement_matched -> LBrace block RBrace .)
    Else            reduce using rule 24 (statement_matched -> LBrace block RBrace .)


state 88

    (11) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched
    (12) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 113


state 89

    (14) statement_matched -> While LParen expression . RParen statement_matched
    (15) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 114


state 90

    (16) statement_matched -> Do statement_matched While . LParen expression RParen Semi

    LParen          shift and go to state 115


state 91

    (17) statement_unmatched -> Do statement_unmatched While . LParen expression RParen Semi

    LParen          shift and go to state 116


state 92

    (18) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched
    (20) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 117


state 93

    (19) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched
    (21) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 118


state 94

    (22) statement_matched -> Return expression Semi .

    RBrace          reduce using rule 22 (statement_matched -> Return expression Semi .)
    If              reduce using rule 22 (statement_matched -> Return expression Semi .)
    While           reduce using rule 22 (statement_matched -> Return expression Semi .)
    Do              reduce using rule 22 (statement_matched -> Return expression Semi .)
    For             reduce using rule 22 (statement_matched -> Return expression Semi .)
    Return          reduce using rule 22 (statement_matched -> Return expression Semi .)
    LBrace          reduce using rule 22 (statement_matched -> Return expression Semi .)
    Break           reduce using rule 22 (statement_matched -> Return expression Semi .)
    Continue        reduce using rule 22 (statement_matched -> Return expression Semi .)
    Int             reduce using rule 22 (statement_matched -> Return expression Semi .)
    Identifier      reduce using rule 22 (statement_matched -> Return expression Semi .)
    Minus           reduce using rule 22 (statement_matched -> Return expression Semi .)
    BitNot          reduce using rule 22 (statement_matched -> Return expression Semi .)
    Not             reduce using rule 22 (statement_matched -> Return expression Semi .)
    Integer         reduce using rule 22 (statement_matched -> Return expression Semi .)
    LParen          reduce using rule 22 (statement_matched -> Return expression Semi .)
    Semi            reduce using rule 22 (statement_matched -> Return expression Semi .)
    Else            reduce using rule 22 (statement_matched -> Return expression Semi .)


state 95

    (65) conditional -> logical_or Question expression . Colon conditional

    Colon           shift and go to state 119


state 96

    (49) logical_or -> logical_or Or logical_and .
    (50) logical_and -> logical_and . And bit_or

    Question        reduce using rule 49 (logical_or -> logical_or Or logical_and .)
    Or              reduce using rule 49 (logical_or -> logical_or Or logical_and .)
    Semi            reduce using rule 49 (logical_or -> logical_or Or logical_and .)
    RParen          reduce using rule 49 (logical_or -> logical_or Or logical_and .)
    Colon           reduce using rule 49 (logical_or -> logical_or Or logical_and .)
    And             shift and go to state 65


state 97

    (50) logical_and -> logical_and And bit_or .
    (51) bit_or -> bit_or . BitOr xor

    And             reduce using rule 50 (logical_and -> logical_and And bit_or .)
    Question        reduce using rule 50 (logical_and -> logical_and And bit_or .)
    Or              reduce using rule 50 (logical_and -> logical_and And bit_or .)
    Semi            reduce using rule 50 (logical_and -> logical_and And bit_or .)
    RParen          reduce using rule 50 (logical_and -> logical_and And bit_or .)
    Colon           reduce using rule 50 (logical_and -> logical_and And bit_or .)
    BitOr           shift and go to state 66


state 98

    (51) bit_or -> bit_or BitOr xor .
    (52) xor -> xor . Xor bit_and

    BitOr           reduce using rule 51 (bit_or -> bit_or BitOr xor .)
    And             reduce using rule 51 (bit_or -> bit_or BitOr xor .)
    Question        reduce using rule 51 (bit_or -> bit_or BitOr xor .)
    Or              reduce using rule 51 (bit_or -> bit_or BitOr xor .)
    Semi            reduce using rule 51 (bit_or -> bit_or BitOr xor .)
    RParen          reduce using rule 51 (bit_or -> bit_or BitOr xor .)
    Colon           reduce using rule 51 (bit_or -> bit_or BitOr xor .)
    Xor             shift and go to state 67


state 99

    (52) xor -> xor Xor bit_and .
    (53) bit_and -> bit_and . BitAnd equality

    Xor             reduce using rule 52 (xor -> xor Xor bit_and .)
    BitOr           reduce using rule 52 (xor -> xor Xor bit_and .)
    And             reduce using rule 52 (xor -> xor Xor bit_and .)
    Question        reduce using rule 52 (xor -> xor Xor bit_and .)
    Or              reduce using rule 52 (xor -> xor Xor bit_and .)
    Semi            reduce using rule 52 (xor -> xor Xor bit_and .)
    RParen          reduce using rule 52 (xor -> xor Xor bit_and .)
    Colon           reduce using rule 52 (xor -> xor Xor bit_and .)
    BitAnd          shift and go to state 68


state 100

    (53) bit_and -> bit_and BitAnd equality .
    (54) equality -> equality . NotEqual relational
    (55) equality -> equality . Equal relational

    BitAnd          reduce using rule 53 (bit_and -> bit_and BitAnd equality .)
    Xor             reduce using rule 53 (bit_and -> bit_and BitAnd equality .)
    BitOr           reduce using rule 53 (bit_and -> bit_and BitAnd equality .)
    And             reduce using rule 53 (bit_and -> bit_and BitAnd equality .)
    Question        reduce using rule 53 (bit_and -> bit_and BitAnd equality .)
    Or              reduce using rule 53 (bit_and -> bit_and BitAnd equality .)
    Semi            reduce using rule 53 (bit_and -> bit_and BitAnd equality .)
    RParen          reduce using rule 53 (bit_and -> bit_and BitAnd equality .)
    Colon           reduce using rule 53 (bit_and -> bit_and BitAnd equality .)
    NotEqual        shift and go to state 69
    Equal           shift and go to state 70


state 101

    (54) equality -> equality NotEqual relational .
    (56) relational -> relational . Less additive
    (57) relational -> relational . Greater additive
    (58) relational -> relational . LessEqual additive
    (59) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 54 (equality -> equality NotEqual relational .)
    Equal           reduce using rule 54 (equality -> equality NotEqual relational .)
    BitAnd          reduce using rule 54 (equality -> equality NotEqual relational .)
    Xor             reduce using rule 54 (equality -> equality NotEqual relational .)
    BitOr           reduce using rule 54 (equality -> equality NotEqual relational .)
    And             reduce using rule 54 (equality -> equality NotEqual relational .)
    Question        reduce using rule 54 (equality -> equality NotEqual relational .)
    Or              reduce using rule 54 (equality -> equality NotEqual relational .)
    Semi            reduce using rule 54 (equality -> equality NotEqual relational .)
    RParen          reduce using rule 54 (equality -> equality NotEqual relational .)
    Colon           reduce using rule 54 (equality -> equality NotEqual relational .)
    Less            shift and go to state 71
    Greater         shift and go to state 72
    LessEqual       shift and go to state 73
    GreaterEqual    shift and go to state 74


state 102

    (55) equality -> equality Equal relational .
    (56) relational -> relational . Less additive
    (57) relational -> relational . Greater additive
    (58) relational -> relational . LessEqual additive
    (59) relational -> relational . GreaterEqual additive

    NotEqual        reduce using rule 55 (equality -> equality Equal relational .)
    Equal           reduce using rule 55 (equality -> equality Equal relational .)
    BitAnd          reduce using rule 55 (equality -> equality Equal relational .)
    Xor             reduce using rule 55 (equality -> equality Equal relational .)
    BitOr           reduce using rule 55 (equality -> equality Equal relational .)
    And             reduce using rule 55 (equality -> equality Equal relational .)
    Question        reduce using rule 55 (equality -> equality Equal relational .)
    Or              reduce using rule 55 (equality -> equality Equal relational .)
    Semi            reduce using rule 55 (equality -> equality Equal relational .)
    RParen          reduce using rule 55 (equality -> equality Equal relational .)
    Colon           reduce using rule 55 (equality -> equality Equal relational .)
    Less            shift and go to state 71
    Greater         shift and go to state 72
    LessEqual       shift and go to state 73
    GreaterEqual    shift and go to state 74


state 103

    (56) relational -> relational Less additive .
    (60) additive -> additive . Plus multiplicative
    (61) additive -> additive . Minus multiplicative

    Less            reduce using rule 56 (relational -> relational Less additive .)
    Greater         reduce using rule 56 (relational -> relational Less additive .)
    LessEqual       reduce using rule 56 (relational -> relational Less additive .)
    GreaterEqual    reduce using rule 56 (relational -> relational Less additive .)
    NotEqual        reduce using rule 56 (relational -> relational Less additive .)
    Equal           reduce using rule 56 (relational -> relational Less additive .)
    BitAnd          reduce using rule 56 (relational -> relational Less additive .)
    Xor             reduce using rule 56 (relational -> relational Less additive .)
    BitOr           reduce using rule 56 (relational -> relational Less additive .)
    And             reduce using rule 56 (relational -> relational Less additive .)
    Question        reduce using rule 56 (relational -> relational Less additive .)
    Or              reduce using rule 56 (relational -> relational Less additive .)
    Semi            reduce using rule 56 (relational -> relational Less additive .)
    RParen          reduce using rule 56 (relational -> relational Less additive .)
    Colon           reduce using rule 56 (relational -> relational Less additive .)
    Plus            shift and go to state 75
    Minus           shift and go to state 76


state 104

    (57) relational -> relational Greater additive .
    (60) additive -> additive . Plus multiplicative
    (61) additive -> additive . Minus multiplicative

    Less            reduce using rule 57 (relational -> relational Greater additive .)
    Greater         reduce using rule 57 (relational -> relational Greater additive .)
    LessEqual       reduce using rule 57 (relational -> relational Greater additive .)
    GreaterEqual    reduce using rule 57 (relational -> relational Greater additive .)
    NotEqual        reduce using rule 57 (relational -> relational Greater additive .)
    Equal           reduce using rule 57 (relational -> relational Greater additive .)
    BitAnd          reduce using rule 57 (relational -> relational Greater additive .)
    Xor             reduce using rule 57 (relational -> relational Greater additive .)
    BitOr           reduce using rule 57 (relational -> relational Greater additive .)
    And             reduce using rule 57 (relational -> relational Greater additive .)
    Question        reduce using rule 57 (relational -> relational Greater additive .)
    Or              reduce using rule 57 (relational -> relational Greater additive .)
    Semi            reduce using rule 57 (relational -> relational Greater additive .)
    RParen          reduce using rule 57 (relational -> relational Greater additive .)
    Colon           reduce using rule 57 (relational -> relational Greater additive .)
    Plus            shift and go to state 75
    Minus           shift and go to state 76


state 105

    (58) relational -> relational LessEqual additive .
    (60) additive -> additive . Plus multiplicative
    (61) additive -> additive . Minus multiplicative

    Less            reduce using rule 58 (relational -> relational LessEqual additive .)
    Greater         reduce using rule 58 (relational -> relational LessEqual additive .)
    LessEqual       reduce using rule 58 (relational -> relational LessEqual additive .)
    GreaterEqual    reduce using rule 58 (relational -> relational LessEqual additive .)
    NotEqual        reduce using rule 58 (relational -> relational LessEqual additive .)
    Equal           reduce using rule 58 (relational -> relational LessEqual additive .)
    BitAnd          reduce using rule 58 (relational -> relational LessEqual additive .)
    Xor             reduce using rule 58 (relational -> relational LessEqual additive .)
    BitOr           reduce using rule 58 (relational -> relational LessEqual additive .)
    And             reduce using rule 58 (relational -> relational LessEqual additive .)
    Question        reduce using rule 58 (relational -> relational LessEqual additive .)
    Or              reduce using rule 58 (relational -> relational LessEqual additive .)
    Semi            reduce using rule 58 (relational -> relational LessEqual additive .)
    RParen          reduce using rule 58 (relational -> relational LessEqual additive .)
    Colon           reduce using rule 58 (relational -> relational LessEqual additive .)
    Plus            shift and go to state 75
    Minus           shift and go to state 76


state 106

    (59) relational -> relational GreaterEqual additive .
    (60) additive -> additive . Plus multiplicative
    (61) additive -> additive . Minus multiplicative

    Less            reduce using rule 59 (relational -> relational GreaterEqual additive .)
    Greater         reduce using rule 59 (relational -> relational GreaterEqual additive .)
    LessEqual       reduce using rule 59 (relational -> relational GreaterEqual additive .)
    GreaterEqual    reduce using rule 59 (relational -> relational GreaterEqual additive .)
    NotEqual        reduce using rule 59 (relational -> relational GreaterEqual additive .)
    Equal           reduce using rule 59 (relational -> relational GreaterEqual additive .)
    BitAnd          reduce using rule 59 (relational -> relational GreaterEqual additive .)
    Xor             reduce using rule 59 (relational -> relational GreaterEqual additive .)
    BitOr           reduce using rule 59 (relational -> relational GreaterEqual additive .)
    And             reduce using rule 59 (relational -> relational GreaterEqual additive .)
    Question        reduce using rule 59 (relational -> relational GreaterEqual additive .)
    Or              reduce using rule 59 (relational -> relational GreaterEqual additive .)
    Semi            reduce using rule 59 (relational -> relational GreaterEqual additive .)
    RParen          reduce using rule 59 (relational -> relational GreaterEqual additive .)
    Colon           reduce using rule 59 (relational -> relational GreaterEqual additive .)
    Plus            shift and go to state 75
    Minus           shift and go to state 76


state 107

    (60) additive -> additive Plus multiplicative .
    (62) multiplicative -> multiplicative . Mul unary
    (63) multiplicative -> multiplicative . Div unary
    (64) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 60 (additive -> additive Plus multiplicative .)
    Minus           reduce using rule 60 (additive -> additive Plus multiplicative .)
    Less            reduce using rule 60 (additive -> additive Plus multiplicative .)
    Greater         reduce using rule 60 (additive -> additive Plus multiplicative .)
    LessEqual       reduce using rule 60 (additive -> additive Plus multiplicative .)
    GreaterEqual    reduce using rule 60 (additive -> additive Plus multiplicative .)
    NotEqual        reduce using rule 60 (additive -> additive Plus multiplicative .)
    Equal           reduce using rule 60 (additive -> additive Plus multiplicative .)
    BitAnd          reduce using rule 60 (additive -> additive Plus multiplicative .)
    Xor             reduce using rule 60 (additive -> additive Plus multiplicative .)
    BitOr           reduce using rule 60 (additive -> additive Plus multiplicative .)
    And             reduce using rule 60 (additive -> additive Plus multiplicative .)
    Question        reduce using rule 60 (additive -> additive Plus multiplicative .)
    Or              reduce using rule 60 (additive -> additive Plus multiplicative .)
    Semi            reduce using rule 60 (additive -> additive Plus multiplicative .)
    RParen          reduce using rule 60 (additive -> additive Plus multiplicative .)
    Colon           reduce using rule 60 (additive -> additive Plus multiplicative .)
    Mul             shift and go to state 77
    Div             shift and go to state 78
    Mod             shift and go to state 79


state 108

    (61) additive -> additive Minus multiplicative .
    (62) multiplicative -> multiplicative . Mul unary
    (63) multiplicative -> multiplicative . Div unary
    (64) multiplicative -> multiplicative . Mod unary

    Plus            reduce using rule 61 (additive -> additive Minus multiplicative .)
    Minus           reduce using rule 61 (additive -> additive Minus multiplicative .)
    Less            reduce using rule 61 (additive -> additive Minus multiplicative .)
    Greater         reduce using rule 61 (additive -> additive Minus multiplicative .)
    LessEqual       reduce using rule 61 (additive -> additive Minus multiplicative .)
    GreaterEqual    reduce using rule 61 (additive -> additive Minus multiplicative .)
    NotEqual        reduce using rule 61 (additive -> additive Minus multiplicative .)
    Equal           reduce using rule 61 (additive -> additive Minus multiplicative .)
    BitAnd          reduce using rule 61 (additive -> additive Minus multiplicative .)
    Xor             reduce using rule 61 (additive -> additive Minus multiplicative .)
    BitOr           reduce using rule 61 (additive -> additive Minus multiplicative .)
    And             reduce using rule 61 (additive -> additive Minus multiplicative .)
    Question        reduce using rule 61 (additive -> additive Minus multiplicative .)
    Or              reduce using rule 61 (additive -> additive Minus multiplicative .)
    Semi            reduce using rule 61 (additive -> additive Minus multiplicative .)
    RParen          reduce using rule 61 (additive -> additive Minus multiplicative .)
    Colon           reduce using rule 61 (additive -> additive Minus multiplicative .)
    Mul             shift and go to state 77
    Div             shift and go to state 78
    Mod             shift and go to state 79


state 109

    (62) multiplicative -> multiplicative Mul unary .

    Mul             reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    Div             reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    Mod             reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    Plus            reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    Minus           reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    Less            reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    Greater         reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    LessEqual       reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    GreaterEqual    reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    NotEqual        reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    Equal           reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    BitAnd          reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    Xor             reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    BitOr           reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    And             reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    Question        reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    Or              reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    Semi            reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    RParen          reduce using rule 62 (multiplicative -> multiplicative Mul unary .)
    Colon           reduce using rule 62 (multiplicative -> multiplicative Mul unary .)


state 110

    (63) multiplicative -> multiplicative Div unary .

    Mul             reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    Div             reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    Mod             reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    Plus            reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    Minus           reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    Less            reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    Greater         reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    LessEqual       reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    GreaterEqual    reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    NotEqual        reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    Equal           reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    BitAnd          reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    Xor             reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    BitOr           reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    And             reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    Question        reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    Or              reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    Semi            reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    RParen          reduce using rule 63 (multiplicative -> multiplicative Div unary .)
    Colon           reduce using rule 63 (multiplicative -> multiplicative Div unary .)


state 111

    (64) multiplicative -> multiplicative Mod unary .

    Mul             reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    Div             reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    Mod             reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    Plus            reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    Minus           reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    Less            reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    Greater         reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    LessEqual       reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    GreaterEqual    reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    NotEqual        reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    Equal           reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    BitAnd          reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    Xor             reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    BitOr           reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    And             reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    Question        reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    Or              reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    Semi            reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    RParen          reduce using rule 64 (multiplicative -> multiplicative Mod unary .)
    Colon           reduce using rule 64 (multiplicative -> multiplicative Mod unary .)


state 112

    (30) declaration -> type Identifier Assign expression .

    Semi            reduce using rule 30 (declaration -> type Identifier Assign expression .)


state 113

    (11) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (12) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (13) statement_unmatched -> If LParen expression RParen . statement
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (9) statement -> . statement_matched
    (10) statement -> . statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (17) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (20) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    If              shift and go to state 22
    While           shift and go to state 23
    Do              shift and go to state 24
    For             shift and go to state 25
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 21
    statement_matched              shift and go to state 120
    statement_unmatched            shift and go to state 20
    statement                      shift and go to state 121
    opt_expression                 shift and go to state 26
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 114

    (14) statement_matched -> While LParen expression RParen . statement_matched
    (15) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (17) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (20) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    If              shift and go to state 22
    While           shift and go to state 23
    Do              shift and go to state 24
    For             shift and go to state 25
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 21
    statement_matched              shift and go to state 122
    statement_unmatched            shift and go to state 123
    opt_expression                 shift and go to state 26
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 115

    (16) statement_matched -> Do statement_matched While LParen . expression RParen Semi
    (31) expression -> . assignment
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 124
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 116

    (17) statement_unmatched -> Do statement_unmatched While LParen . expression RParen Semi
    (31) expression -> . assignment
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 125
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 117

    (18) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (20) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 126
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 118

    (19) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (21) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 127
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 119

    (65) conditional -> logical_or Question expression Colon . conditional
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    Identifier      shift and go to state 81
    LParen          shift and go to state 13

    logical_or                     shift and go to state 33
    conditional                    shift and go to state 128
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 120

    (11) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched
    (12) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (9) statement -> statement_matched .

    Else            shift and go to state 129
    RBrace          reduce using rule 9 (statement -> statement_matched .)
    If              reduce using rule 9 (statement -> statement_matched .)
    While           reduce using rule 9 (statement -> statement_matched .)
    Do              reduce using rule 9 (statement -> statement_matched .)
    For             reduce using rule 9 (statement -> statement_matched .)
    Return          reduce using rule 9 (statement -> statement_matched .)
    LBrace          reduce using rule 9 (statement -> statement_matched .)
    Break           reduce using rule 9 (statement -> statement_matched .)
    Continue        reduce using rule 9 (statement -> statement_matched .)
    Int             reduce using rule 9 (statement -> statement_matched .)
    Identifier      reduce using rule 9 (statement -> statement_matched .)
    Minus           reduce using rule 9 (statement -> statement_matched .)
    BitNot          reduce using rule 9 (statement -> statement_matched .)
    Not             reduce using rule 9 (statement -> statement_matched .)
    Integer         reduce using rule 9 (statement -> statement_matched .)
    LParen          reduce using rule 9 (statement -> statement_matched .)
    Semi            reduce using rule 9 (statement -> statement_matched .)


state 121

    (13) statement_unmatched -> If LParen expression RParen statement .

    RBrace          reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    If              reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    While           reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Do              reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    For             reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Return          reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    LBrace          reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Break           reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Continue        reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Int             reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Identifier      reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Minus           reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    BitNot          reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Not             reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Integer         reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    LParen          reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)
    Semi            reduce using rule 13 (statement_unmatched -> If LParen expression RParen statement .)


state 122

    (14) statement_matched -> While LParen expression RParen statement_matched .

    RBrace          reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    If              reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    While           reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Do              reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    For             reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Return          reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    LBrace          reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Break           reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Continue        reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Int             reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Identifier      reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Minus           reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    BitNot          reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Not             reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Integer         reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    LParen          reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Semi            reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)
    Else            reduce using rule 14 (statement_matched -> While LParen expression RParen statement_matched .)


state 123

    (15) statement_unmatched -> While LParen expression RParen statement_unmatched .

    RBrace          reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    If              reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    While           reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Do              reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    For             reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Return          reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LBrace          reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Break           reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Continue        reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Int             reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Identifier      reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Minus           reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    BitNot          reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Not             reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Integer         reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    LParen          reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)
    Semi            reduce using rule 15 (statement_unmatched -> While LParen expression RParen statement_unmatched .)


state 124

    (16) statement_matched -> Do statement_matched While LParen expression . RParen Semi

    RParen          shift and go to state 130


state 125

    (17) statement_unmatched -> Do statement_unmatched While LParen expression . RParen Semi

    RParen          shift and go to state 131


state 126

    (18) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched
    (20) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 132


state 127

    (19) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched
    (21) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 133


state 128

    (65) conditional -> logical_or Question expression Colon conditional .

    Semi            reduce using rule 65 (conditional -> logical_or Question expression Colon conditional .)
    RParen          reduce using rule 65 (conditional -> logical_or Question expression Colon conditional .)
    Colon           reduce using rule 65 (conditional -> logical_or Question expression Colon conditional .)


state 129

    (11) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (12) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (17) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (20) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    If              shift and go to state 22
    While           shift and go to state 23
    Do              shift and go to state 24
    For             shift and go to state 25
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 21
    statement_matched              shift and go to state 134
    statement_unmatched            shift and go to state 135
    opt_expression                 shift and go to state 26
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 130

    (16) statement_matched -> Do statement_matched While LParen expression RParen . Semi

    Semi            shift and go to state 136


state 131

    (17) statement_unmatched -> Do statement_unmatched While LParen expression RParen . Semi

    Semi            shift and go to state 137


state 132

    (18) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (20) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 138
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 133

    (19) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (21) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 139
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 134

    (11) statement_matched -> If LParen expression RParen statement_matched Else statement_matched .

    RBrace          reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    If              reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    While           reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Do              reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    For             reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Return          reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LBrace          reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Break           reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Continue        reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Int             reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Identifier      reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Minus           reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    BitNot          reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Not             reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Integer         reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    LParen          reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Semi            reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)
    Else            reduce using rule 11 (statement_matched -> If LParen expression RParen statement_matched Else statement_matched .)


state 135

    (12) statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .

    RBrace          reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    If              reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    While           reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Do              reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    For             reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Return          reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LBrace          reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Break           reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Continue        reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Int             reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Identifier      reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Minus           reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    BitNot          reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Not             reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Integer         reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    LParen          reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)
    Semi            reduce using rule 12 (statement_unmatched -> If LParen expression RParen statement_matched Else statement_unmatched .)


state 136

    (16) statement_matched -> Do statement_matched While LParen expression RParen Semi .

    RBrace          reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    If              reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    While           reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Do              reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    For             reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Return          reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LBrace          reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Break           reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Continue        reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Int             reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Identifier      reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Minus           reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    BitNot          reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Not             reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Integer         reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    LParen          reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Semi            reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)
    Else            reduce using rule 16 (statement_matched -> Do statement_matched While LParen expression RParen Semi .)


state 137

    (17) statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .

    RBrace          reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    If              reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    While           reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Do              reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    For             reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Return          reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LBrace          reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Break           reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Continue        reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Int             reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Identifier      reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Minus           reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    BitNot          reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Not             reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Integer         reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    LParen          reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)
    Semi            reduce using rule 17 (statement_unmatched -> Do statement_unmatched While LParen expression RParen Semi .)


state 138

    (18) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched
    (20) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 140


state 139

    (19) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched
    (21) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched

    RParen          shift and go to state 142
    Semi            shift and go to state 141


state 140

    (18) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (20) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (17) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (20) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    If              shift and go to state 22
    While           shift and go to state 23
    Do              shift and go to state 24
    For             shift and go to state 25
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 26
    statement_matched              shift and go to state 143
    statement_unmatched            shift and go to state 144
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 141

    (21) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 145
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 142

    (19) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen . statement_matched
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    If              shift and go to state 148
    While           shift and go to state 149
    Do              shift and go to state 150
    For             shift and go to state 146
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 26
    statement_matched              shift and go to state 147
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 143

    (18) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .

    RBrace          reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 18 (statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched .)


state 144

    (20) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 20 (statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 145

    (21) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 151


state 146

    (18) statement_matched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> For . LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched

    LParen          shift and go to state 152


state 147

    (19) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .

    RBrace          reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    If              reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    While           reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Do              reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    For             reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Return          reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LBrace          reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Break           reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Continue        reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Int             reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Identifier      reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Minus           reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    BitNot          reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Not             reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Integer         reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    LParen          reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Semi            reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)
    Else            reduce using rule 19 (statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched .)


state 148

    (11) statement_matched -> If . LParen expression RParen statement_matched Else statement_matched

    LParen          shift and go to state 153


state 149

    (14) statement_matched -> While . LParen expression RParen statement_matched

    LParen          shift and go to state 154


state 150

    (16) statement_matched -> Do . statement_matched While LParen expression RParen Semi
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    If              shift and go to state 148
    While           shift and go to state 149
    Do              shift and go to state 150
    For             shift and go to state 146
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    statement_matched              shift and go to state 56
    expression                     shift and go to state 21
    opt_expression                 shift and go to state 26
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 151

    (21) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (17) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (20) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    If              shift and go to state 157
    While           shift and go to state 158
    Do              shift and go to state 159
    For             shift and go to state 155

    statement_unmatched            shift and go to state 156

state 152

    (18) statement_matched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> For LParen . declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (29) declaration -> . type Identifier
    (30) declaration -> . type Identifier Assign expression
    (31) expression -> . assignment
    (1) empty -> .
    (3) type -> . Int
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 4
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 160
    declaration                    shift and go to state 161
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    type                           shift and go to state 11
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 153

    (11) statement_matched -> If LParen . expression RParen statement_matched Else statement_matched
    (31) expression -> . assignment
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 162
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 154

    (14) statement_matched -> While LParen . expression RParen statement_matched
    (31) expression -> . assignment
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 163
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 155

    (20) statement_unmatched -> For . LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> For . LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    LParen          shift and go to state 164


state 156

    (21) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .

    RBrace          reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    If              reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    While           reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Do              reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    For             reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Return          reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LBrace          reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Break           reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Continue        reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Int             reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Identifier      reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Minus           reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    BitNot          reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Not             reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Integer         reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    LParen          reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)
    Semi            reduce using rule 21 (statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched .)


state 157

    (12) statement_unmatched -> If . LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> If . LParen expression RParen statement

    LParen          shift and go to state 165


state 158

    (15) statement_unmatched -> While . LParen expression RParen statement_unmatched

    LParen          shift and go to state 166


state 159

    (17) statement_unmatched -> Do . statement_unmatched While LParen expression RParen Semi
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (17) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (20) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    If              shift and go to state 157
    While           shift and go to state 158
    Do              shift and go to state 159
    For             shift and go to state 155

    statement_unmatched            shift and go to state 57

state 160

    (18) statement_matched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 167


state 161

    (19) statement_matched -> For LParen declaration . Semi opt_expression Semi opt_expression RParen statement_matched

    Semi            shift and go to state 168


state 162

    (11) statement_matched -> If LParen expression . RParen statement_matched Else statement_matched

    RParen          shift and go to state 169


state 163

    (14) statement_matched -> While LParen expression . RParen statement_matched

    RParen          shift and go to state 170


state 164

    (20) statement_unmatched -> For LParen . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> For LParen . declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (29) declaration -> . type Identifier
    (30) declaration -> . type Identifier Assign expression
    (31) expression -> . assignment
    (1) empty -> .
    (3) type -> . Int
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Int             shift and go to state 4
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 171
    declaration                    shift and go to state 172
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    type                           shift and go to state 11
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 165

    (12) statement_unmatched -> If LParen . expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> If LParen . expression RParen statement
    (31) expression -> . assignment
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 173
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 166

    (15) statement_unmatched -> While LParen . expression RParen statement_unmatched
    (31) expression -> . assignment
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 174
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 167

    (18) statement_matched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_matched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 175
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 168

    (19) statement_matched -> For LParen declaration Semi . opt_expression Semi opt_expression RParen statement_matched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 176
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 169

    (11) statement_matched -> If LParen expression RParen . statement_matched Else statement_matched
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    If              shift and go to state 148
    While           shift and go to state 149
    Do              shift and go to state 150
    For             shift and go to state 146
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 21
    statement_matched              shift and go to state 177
    opt_expression                 shift and go to state 26
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 170

    (14) statement_matched -> While LParen expression RParen . statement_matched
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    If              shift and go to state 148
    While           shift and go to state 149
    Do              shift and go to state 150
    For             shift and go to state 146
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 21
    statement_matched              shift and go to state 122
    opt_expression                 shift and go to state 26
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 171

    (20) statement_unmatched -> For LParen opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 178


state 172

    (21) statement_unmatched -> For LParen declaration . Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 179


state 173

    (12) statement_unmatched -> If LParen expression . RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> If LParen expression . RParen statement

    RParen          shift and go to state 180


state 174

    (15) statement_unmatched -> While LParen expression . RParen statement_unmatched

    RParen          shift and go to state 181


state 175

    (18) statement_matched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 182


state 176

    (19) statement_matched -> For LParen declaration Semi opt_expression . Semi opt_expression RParen statement_matched

    Semi            shift and go to state 183


state 177

    (11) statement_matched -> If LParen expression RParen statement_matched . Else statement_matched

    Else            shift and go to state 184


state 178

    (20) statement_unmatched -> For LParen opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 185
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 179

    (21) statement_unmatched -> For LParen declaration Semi . opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 186
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 180

    (12) statement_unmatched -> If LParen expression RParen . statement_matched Else statement_unmatched
    (13) statement_unmatched -> If LParen expression RParen . statement
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (9) statement -> . statement_matched
    (10) statement -> . statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (17) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (20) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    If              shift and go to state 22
    While           shift and go to state 23
    Do              shift and go to state 24
    For             shift and go to state 25
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 21
    statement_matched              shift and go to state 187
    statement_unmatched            shift and go to state 20
    statement                      shift and go to state 121
    opt_expression                 shift and go to state 26
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 181

    (15) statement_unmatched -> While LParen expression RParen . statement_unmatched
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (17) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (20) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    If              shift and go to state 157
    While           shift and go to state 158
    Do              shift and go to state 159
    For             shift and go to state 155

    statement_unmatched            shift and go to state 123

state 182

    (18) statement_matched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_matched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 188
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 183

    (19) statement_matched -> For LParen declaration Semi opt_expression Semi . opt_expression RParen statement_matched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 189
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 184

    (11) statement_matched -> If LParen expression RParen statement_matched Else . statement_matched
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    If              shift and go to state 148
    While           shift and go to state 149
    Do              shift and go to state 150
    For             shift and go to state 146
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    expression                     shift and go to state 21
    statement_matched              shift and go to state 134
    opt_expression                 shift and go to state 26
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 185

    (20) statement_unmatched -> For LParen opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 190


state 186

    (21) statement_unmatched -> For LParen declaration Semi opt_expression . Semi opt_expression Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 191


state 187

    (12) statement_unmatched -> If LParen expression RParen statement_matched . Else statement_unmatched
    (9) statement -> statement_matched .

    Else            shift and go to state 192
    RBrace          reduce using rule 9 (statement -> statement_matched .)
    If              reduce using rule 9 (statement -> statement_matched .)
    While           reduce using rule 9 (statement -> statement_matched .)
    Do              reduce using rule 9 (statement -> statement_matched .)
    For             reduce using rule 9 (statement -> statement_matched .)
    Return          reduce using rule 9 (statement -> statement_matched .)
    LBrace          reduce using rule 9 (statement -> statement_matched .)
    Break           reduce using rule 9 (statement -> statement_matched .)
    Continue        reduce using rule 9 (statement -> statement_matched .)
    Int             reduce using rule 9 (statement -> statement_matched .)
    Identifier      reduce using rule 9 (statement -> statement_matched .)
    Minus           reduce using rule 9 (statement -> statement_matched .)
    BitNot          reduce using rule 9 (statement -> statement_matched .)
    Not             reduce using rule 9 (statement -> statement_matched .)
    Integer         reduce using rule 9 (statement -> statement_matched .)
    LParen          reduce using rule 9 (statement -> statement_matched .)
    Semi            reduce using rule 9 (statement -> statement_matched .)


state 188

    (18) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 193


state 189

    (19) statement_matched -> For LParen declaration Semi opt_expression Semi opt_expression . RParen statement_matched

    RParen          shift and go to state 142


state 190

    (20) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi . opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    RParen          reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 194
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 191

    (21) statement_unmatched -> For LParen declaration Semi opt_expression Semi . opt_expression Semi opt_expression RParen statement_unmatched
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 195
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 192

    (12) statement_unmatched -> If LParen expression RParen statement_matched Else . statement_unmatched
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (17) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (20) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    If              shift and go to state 157
    While           shift and go to state 158
    Do              shift and go to state 159
    For             shift and go to state 155

    statement_unmatched            shift and go to state 135

state 193

    (18) statement_matched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_matched
    (11) statement_matched -> . If LParen expression RParen statement_matched Else statement_matched
    (14) statement_matched -> . While LParen expression RParen statement_matched
    (16) statement_matched -> . Do statement_matched While LParen expression RParen Semi
    (18) statement_matched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_matched
    (19) statement_matched -> . For LParen declaration Semi opt_expression Semi opt_expression RParen statement_matched
    (22) statement_matched -> . Return expression Semi
    (23) statement_matched -> . opt_expression Semi
    (24) statement_matched -> . LBrace block RBrace
    (25) statement_matched -> . Break Semi
    (26) statement_matched -> . Continue Semi
    (27) opt_expression -> . expression
    (28) opt_expression -> . empty
    (31) expression -> . assignment
    (1) empty -> .
    (32) assignment -> . conditional
    (48) assignment -> . Identifier Assign expression
    (33) conditional -> . logical_or
    (65) conditional -> . logical_or Question expression Colon conditional
    (34) logical_or -> . logical_and
    (49) logical_or -> . logical_or Or logical_and
    (35) logical_and -> . bit_or
    (50) logical_and -> . logical_and And bit_or
    (36) bit_or -> . xor
    (51) bit_or -> . bit_or BitOr xor
    (37) xor -> . bit_and
    (52) xor -> . xor Xor bit_and
    (38) bit_and -> . equality
    (53) bit_and -> . bit_and BitAnd equality
    (39) equality -> . relational
    (54) equality -> . equality NotEqual relational
    (55) equality -> . equality Equal relational
    (40) relational -> . additive
    (56) relational -> . relational Less additive
    (57) relational -> . relational Greater additive
    (58) relational -> . relational LessEqual additive
    (59) relational -> . relational GreaterEqual additive
    (41) additive -> . multiplicative
    (60) additive -> . additive Plus multiplicative
    (61) additive -> . additive Minus multiplicative
    (42) multiplicative -> . unary
    (62) multiplicative -> . multiplicative Mul unary
    (63) multiplicative -> . multiplicative Div unary
    (64) multiplicative -> . multiplicative Mod unary
    (43) unary -> . postfix
    (45) unary -> . Minus unary
    (46) unary -> . BitNot unary
    (47) unary -> . Not unary
    (44) postfix -> . primary
    (66) primary -> . Integer
    (67) primary -> . Identifier
    (68) primary -> . LParen expression RParen

    If              shift and go to state 148
    While           shift and go to state 149
    Do              shift and go to state 150
    For             shift and go to state 146
    Return          shift and go to state 27
    LBrace          shift and go to state 14
    Break           shift and go to state 28
    Continue        shift and go to state 29
    Semi            reduce using rule 1 (empty -> .)
    Identifier      shift and go to state 12
    Minus           shift and go to state 42
    BitNot          shift and go to state 45
    Not             shift and go to state 46
    Integer         shift and go to state 48
    LParen          shift and go to state 13

    opt_expression                 shift and go to state 26
    statement_matched              shift and go to state 143
    expression                     shift and go to state 21
    empty                          shift and go to state 30
    assignment                     shift and go to state 31
    conditional                    shift and go to state 32
    logical_or                     shift and go to state 33
    logical_and                    shift and go to state 34
    bit_or                         shift and go to state 35
    xor                            shift and go to state 36
    bit_and                        shift and go to state 37
    equality                       shift and go to state 38
    relational                     shift and go to state 39
    additive                       shift and go to state 40
    multiplicative                 shift and go to state 41
    unary                          shift and go to state 43
    postfix                        shift and go to state 44
    primary                        shift and go to state 47

state 194

    (20) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression . RParen statement_unmatched

    RParen          shift and go to state 196


state 195

    (21) statement_unmatched -> For LParen declaration Semi opt_expression Semi opt_expression . Semi opt_expression RParen statement_unmatched

    Semi            shift and go to state 141


state 196

    (20) statement_unmatched -> For LParen opt_expression Semi opt_expression Semi opt_expression RParen . statement_unmatched
    (12) statement_unmatched -> . If LParen expression RParen statement_matched Else statement_unmatched
    (13) statement_unmatched -> . If LParen expression RParen statement
    (15) statement_unmatched -> . While LParen expression RParen statement_unmatched
    (17) statement_unmatched -> . Do statement_unmatched While LParen expression RParen Semi
    (20) statement_unmatched -> . For LParen opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched
    (21) statement_unmatched -> . For LParen declaration Semi opt_expression Semi opt_expression Semi opt_expression RParen statement_unmatched

    If              shift and go to state 157
    While           shift and go to state 158
    Do              shift and go to state 159
    For             shift and go to state 155

    statement_unmatched            shift and go to state 144
